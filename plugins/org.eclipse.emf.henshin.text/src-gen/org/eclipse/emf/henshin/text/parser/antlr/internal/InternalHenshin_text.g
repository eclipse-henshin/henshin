/*
 * generated by Xtext 2.16.0
 */
grammar InternalHenshin_text;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.emf.henshin.text.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.emf.henshin.text.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.emf.henshin.text.services.Henshin_textGrammarAccess;

}

@parser::members {

 	private Henshin_textGrammarAccess grammarAccess;

    public InternalHenshin_textParser(TokenStream input, Henshin_textGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected Henshin_textGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getEPackageimportsEPackageImportParserRuleCall_0_0());
				}
				lv_ePackageimports_0_0=ruleEPackageImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"ePackageimports",
						lv_ePackageimports_0_0,
						"org.eclipse.emf.henshin.text.Henshin_text.EPackageImport");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTransformationsystemModelElementParserRuleCall_1_0());
				}
				lv_transformationsystem_1_0=ruleModelElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"transformationsystem",
						lv_transformationsystem_1_0,
						"org.eclipse.emf.henshin.text.Henshin_text.ModelElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEPackageImport
entryRuleEPackageImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEPackageImportRule()); }
	iv_ruleEPackageImport=ruleEPackageImport
	{ $current=$iv_ruleEPackageImport.current; }
	EOF;

// Rule EPackageImport
ruleEPackageImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ePackageImport'
		{
			newLeafNode(otherlv_0, grammarAccess.getEPackageImportAccess().getEPackageImportKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEPackageImportRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getEPackageImportAccess().getRefEPackageCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getEStringAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEStringAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleModelElement
entryRuleModelElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelElementRule()); }
	iv_ruleModelElement=ruleModelElement
	{ $current=$iv_ruleModelElement.current; }
	EOF;

// Rule ModelElement
ruleModelElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='rule'
			{
				newLeafNode(otherlv_0, grammarAccess.getModelElementAccess().getRuleKeyword_0_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getModelElementAccess().getRuleAction_0_1(),
						$current);
				}
			)
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getModelElementAccess().getNameIDTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getModelElementRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getModelElementAccess().getLeftParenthesisKeyword_0_3());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getModelElementAccess().getParametersParameterParserRuleCall_0_4_0_0());
						}
						lv_parameters_4_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getModelElementRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"org.eclipse.emf.henshin.text.Henshin_text.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_5=','
					{
						newLeafNode(otherlv_5, grammarAccess.getModelElementAccess().getCommaKeyword_0_4_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getModelElementAccess().getParametersParameterParserRuleCall_0_4_1_1_0());
							}
							lv_parameters_6_0=ruleParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getModelElementRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_6_0,
									"org.eclipse.emf.henshin.text.Henshin_text.Parameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getModelElementAccess().getRightParenthesisKeyword_0_5());
			}
			otherlv_8='{'
			{
				newLeafNode(otherlv_8, grammarAccess.getModelElementAccess().getLeftCurlyBracketKeyword_0_6());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelElementAccess().getRuleElementsRuleElementParserRuleCall_0_7_0());
					}
					lv_ruleElements_9_0=ruleRuleElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelElementRule());
						}
						add(
							$current,
							"ruleElements",
							lv_ruleElements_9_0,
							"org.eclipse.emf.henshin.text.Henshin_text.RuleElement");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getModelElementAccess().getRightCurlyBracketKeyword_0_8());
			}
		)
		    |
		(
			otherlv_11='unit'
			{
				newLeafNode(otherlv_11, grammarAccess.getModelElementAccess().getUnitKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getModelElementAccess().getUnitAction_1_1(),
						$current);
				}
			)
			(
				(
					lv_name_13_0=RULE_ID
					{
						newLeafNode(lv_name_13_0, grammarAccess.getModelElementAccess().getNameIDTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getModelElementRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_13_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_14='('
			{
				newLeafNode(otherlv_14, grammarAccess.getModelElementAccess().getLeftParenthesisKeyword_1_3());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getModelElementAccess().getParametersParameterParserRuleCall_1_4_0_0());
						}
						lv_parameters_15_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getModelElementRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_15_0,
								"org.eclipse.emf.henshin.text.Henshin_text.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_16=','
					{
						newLeafNode(otherlv_16, grammarAccess.getModelElementAccess().getCommaKeyword_1_4_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getModelElementAccess().getParametersParameterParserRuleCall_1_4_1_1_0());
							}
							lv_parameters_17_0=ruleParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getModelElementRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_17_0,
									"org.eclipse.emf.henshin.text.Henshin_text.Parameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_18=')'
			{
				newLeafNode(otherlv_18, grammarAccess.getModelElementAccess().getRightParenthesisKeyword_1_5());
			}
			otherlv_19='{'
			{
				newLeafNode(otherlv_19, grammarAccess.getModelElementAccess().getLeftCurlyBracketKeyword_1_6());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelElementAccess().getUnitElementsUnitElementParserRuleCall_1_7_0());
					}
					lv_unitElements_20_0=ruleUnitElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelElementRule());
						}
						add(
							$current,
							"unitElements",
							lv_unitElements_20_0,
							"org.eclipse.emf.henshin.text.Henshin_text.UnitElement");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_21='}'
			{
				newLeafNode(otherlv_21, grammarAccess.getModelElementAccess().getRightCurlyBracketKeyword_1_8());
			}
		)
	)
;

// Entry rule entryRuleRuleElement
entryRuleRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleElementRule()); }
	iv_ruleRuleElement=ruleRuleElement
	{ $current=$iv_ruleRuleElement.current; }
	EOF;

// Rule RuleElement
ruleRuleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRuleElementAccess().getJavaImportParserRuleCall_0());
		}
		this_JavaImport_0=ruleJavaImport
		{
			$current = $this_JavaImport_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleElementAccess().getCheckDanglingParserRuleCall_1());
		}
		this_CheckDangling_1=ruleCheckDangling
		{
			$current = $this_CheckDangling_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleElementAccess().getInjectiveMatchingParserRuleCall_2());
		}
		this_InjectiveMatching_2=ruleInjectiveMatching
		{
			$current = $this_InjectiveMatching_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleElementAccess().getConditionsParserRuleCall_3());
		}
		this_Conditions_3=ruleConditions
		{
			$current = $this_Conditions_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleElementAccess().getGraphParserRuleCall_4());
		}
		this_Graph_4=ruleGraph
		{
			$current = $this_Graph_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleJavaImport
entryRuleJavaImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJavaImportRule()); }
	iv_ruleJavaImport=ruleJavaImport
	{ $current=$iv_ruleJavaImport.current; }
	EOF;

// Rule JavaImport
ruleJavaImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='javaImport'
		{
			newLeafNode(otherlv_0, grammarAccess.getJavaImportAccess().getJavaImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJavaImportAccess().getPackagenameEStringParserRuleCall_1_0());
				}
				lv_packagename_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJavaImportRule());
					}
					set(
						$current,
						"packagename",
						lv_packagename_1_0,
						"org.eclipse.emf.henshin.text.Henshin_text.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCheckDangling
entryRuleCheckDangling returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckDanglingRule()); }
	iv_ruleCheckDangling=ruleCheckDangling
	{ $current=$iv_ruleCheckDangling.current; }
	EOF;

// Rule CheckDangling
ruleCheckDangling returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='checkDangling'
		{
			newLeafNode(otherlv_0, grammarAccess.getCheckDanglingAccess().getCheckDanglingKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckDanglingAccess().getCheckDanglingEBooleanParserRuleCall_1_0());
				}
				lv_checkDangling_1_0=ruleEBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckDanglingRule());
					}
					set(
						$current,
						"checkDangling",
						lv_checkDangling_1_0,
						"org.eclipse.emf.henshin.text.Henshin_text.EBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInjectiveMatching
entryRuleInjectiveMatching returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInjectiveMatchingRule()); }
	iv_ruleInjectiveMatching=ruleInjectiveMatching
	{ $current=$iv_ruleInjectiveMatching.current; }
	EOF;

// Rule InjectiveMatching
ruleInjectiveMatching returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='injectiveMatching'
		{
			newLeafNode(otherlv_0, grammarAccess.getInjectiveMatchingAccess().getInjectiveMatchingKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInjectiveMatchingAccess().getInjectiveMatchingEBooleanParserRuleCall_1_0());
				}
				lv_injectiveMatching_1_0=ruleEBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInjectiveMatchingRule());
					}
					set(
						$current,
						"injectiveMatching",
						lv_injectiveMatching_1_0,
						"org.eclipse.emf.henshin.text.Henshin_text.EBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConditions
entryRuleConditions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionsRule()); }
	iv_ruleConditions=ruleConditions
	{ $current=$iv_ruleConditions.current; }
	EOF;

// Rule Conditions
ruleConditions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='conditions'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionsAccess().getConditionsKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionsAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionsAccess().getAttributeConditionsExpressionParserRuleCall_2_0());
				}
				lv_attributeConditions_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionsRule());
					}
					add(
						$current,
						"attributeConditions",
						lv_attributeConditions_2_0,
						"org.eclipse.emf.henshin.text.Henshin_text.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getConditionsAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionsAccess().getAttributeConditionsExpressionParserRuleCall_3_1_0());
					}
					lv_attributeConditions_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionsRule());
						}
						add(
							$current,
							"attributeConditions",
							lv_attributeConditions_4_0,
							"org.eclipse.emf.henshin.text.Henshin_text.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getConditionsAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleGraph
entryRuleGraph returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphRule()); }
	iv_ruleGraph=ruleGraph
	{ $current=$iv_ruleGraph.current; }
	EOF;

// Rule Graph
ruleGraph returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGraphAccess().getGraphAction_0(),
					$current);
			}
		)
		otherlv_1='graph'
		{
			newLeafNode(otherlv_1, grammarAccess.getGraphAccess().getGraphKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getGraphAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphAccess().getGraphElementsGraphElementsParserRuleCall_3_0());
				}
				lv_graphElements_3_0=ruleGraphElements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphRule());
					}
					add(
						$current,
						"graphElements",
						lv_graphElements_3_0,
						"org.eclipse.emf.henshin.text.Henshin_text.GraphElements");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getGraphAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleActionType
entryRuleActionType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getActionTypeRule()); }
	iv_ruleActionType=ruleActionType
	{ $current=$iv_ruleActionType.current.getText(); }
	EOF;

// Rule ActionType
ruleActionType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='preserve'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getActionTypeAccess().getPreserveKeyword_0());
		}
		    |
		kw='create'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getActionTypeAccess().getCreateKeyword_1());
		}
		    |
		kw='delete'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getActionTypeAccess().getDeleteKeyword_2());
		}
		    |
		kw='forbid'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getActionTypeAccess().getForbidKeyword_3());
		}
		    |
		kw='require'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getActionTypeAccess().getRequireKeyword_4());
		}
	)
;

// Entry rule entryRuleGraphElements
entryRuleGraphElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphElementsRule()); }
	iv_ruleGraphElements=ruleGraphElements
	{ $current=$iv_ruleGraphElements.current; }
	EOF;

// Rule GraphElements
ruleGraphElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGraphElementsAccess().getEdgesParserRuleCall_0());
		}
		this_Edges_0=ruleEdges
		{
			$current = $this_Edges_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGraphElementsAccess().getNodeParserRuleCall_1());
		}
		this_Node_1=ruleNode
		{
			$current = $this_Node_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGraphElementsAccess().getFormulaParserRuleCall_2());
		}
		this_Formula_2=ruleFormula
		{
			$current = $this_Formula_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGraphElementsAccess().getMultiRuleParserRuleCall_3());
		}
		this_MultiRule_3=ruleMultiRule
		{
			$current = $this_MultiRule_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGraphElementsAccess().getMultiRuleReuseNodeParserRuleCall_4());
		}
		this_MultiRuleReuseNode_4=ruleMultiRuleReuseNode
		{
			$current = $this_MultiRuleReuseNode_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEdges
entryRuleEdges returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEdgesRule()); }
	iv_ruleEdges=ruleEdges
	{ $current=$iv_ruleEdges.current; }
	EOF;

// Rule Edges
ruleEdges returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='edges'
		{
			newLeafNode(otherlv_0, grammarAccess.getEdgesAccess().getEdgesKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getEdgesAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEdgesAccess().getEdgesEdgeParserRuleCall_2_0());
				}
				lv_edges_2_0=ruleEdge
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEdgesRule());
					}
					add(
						$current,
						"edges",
						lv_edges_2_0,
						"org.eclipse.emf.henshin.text.Henshin_text.Edge");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getEdgesAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEdgesAccess().getEdgesEdgeParserRuleCall_3_1_0());
					}
					lv_edges_4_0=ruleEdge
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEdgesRule());
						}
						add(
							$current,
							"edges",
							lv_edges_4_0,
							"org.eclipse.emf.henshin.text.Henshin_text.Edge");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getEdgesAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEdge
entryRuleEdge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEdgeRule()); }
	iv_ruleEdge=ruleEdge
	{ $current=$iv_ruleEdge.current; }
	EOF;

// Rule Edge
ruleEdge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getEdgeAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEdgeAccess().getActiontypeActionTypeParserRuleCall_1_0());
				}
				lv_actiontype_1_0=ruleActionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEdgeRule());
					}
					set(
						$current,
						"actiontype",
						lv_actiontype_1_0,
						"org.eclipse.emf.henshin.text.Henshin_text.ActionType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEdgeRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getEdgeAccess().getSourceRuleNodeTypesCrossReference_2_0());
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getEdgeAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEdgeRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getEdgeAccess().getTargetRuleNodeTypesCrossReference_4_0());
				}
			)
		)
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getEdgeAccess().getColonKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEdgeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getEdgeAccess().getTypeEReferenceCrossReference_6_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getEdgeAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNodeAccess().getActiontypeActionTypeParserRuleCall_0_0());
				}
				lv_actiontype_0_0=ruleActionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodeRule());
					}
					set(
						$current,
						"actiontype",
						lv_actiontype_0_0,
						"org.eclipse.emf.henshin.text.Henshin_text.ActionType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='node'
		{
			newLeafNode(otherlv_1, grammarAccess.getNodeAccess().getNodeKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getNodeAccess().getColonKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getNodeAccess().getNodetypeEClassCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getNodeAccess().getLeftCurlyBracketKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNodeAccess().getAttributeAttributeParserRuleCall_5_1_0());
					}
					lv_attribute_6_0=ruleAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodeRule());
						}
						add(
							$current,
							"attribute",
							lv_attribute_6_0,
							"org.eclipse.emf.henshin.text.Henshin_text.Attribute");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getNodeAccess().getRightCurlyBracketKeyword_5_2());
			}
		)?
	)
;

// Entry rule entryRuleMultiRuleReuseNode
entryRuleMultiRuleReuseNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiRuleReuseNodeRule()); }
	iv_ruleMultiRuleReuseNode=ruleMultiRuleReuseNode
	{ $current=$iv_ruleMultiRuleReuseNode.current; }
	EOF;

// Rule MultiRuleReuseNode
ruleMultiRuleReuseNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='reuse'
		{
			newLeafNode(otherlv_0, grammarAccess.getMultiRuleReuseNodeAccess().getReuseKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiRuleReuseNodeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getMultiRuleReuseNodeAccess().getNameNodeCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getMultiRuleReuseNodeAccess().getLeftCurlyBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiRuleReuseNodeAccess().getAttributeAttributeParserRuleCall_2_1_0());
					}
					lv_attribute_3_0=ruleAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiRuleReuseNodeRule());
						}
						add(
							$current,
							"attribute",
							lv_attribute_3_0,
							"org.eclipse.emf.henshin.text.Henshin_text.Attribute");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getMultiRuleReuseNodeAccess().getRightCurlyBracketKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeAccess().getActiontypeActionTypeParserRuleCall_0_0_0());
					}
					lv_actiontype_0_0=ruleActionType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeRule());
						}
						set(
							$current,
							"actiontype",
							lv_actiontype_0_0,
							"org.eclipse.emf.henshin.text.Henshin_text.ActionType");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttributeRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getAttributeAccess().getNameEAttributeCrossReference_0_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getAttributeAccess().getEqualsSignKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeAccess().getValueExpressionParserRuleCall_0_3_0());
					}
					lv_value_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeRule());
						}
						set(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.emf.henshin.text.Henshin_text.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_update_4_0='set'
					{
						newLeafNode(lv_update_4_0, grammarAccess.getAttributeAccess().getUpdateSetKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttributeRule());
						}
						setWithLastConsumed($current, "update", lv_update_4_0, "set");
					}
				)
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttributeRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getAttributeAccess().getNameEAttributeCrossReference_1_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6='='
			{
				newLeafNode(otherlv_6, grammarAccess.getAttributeAccess().getEqualsSignKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeAccess().getValueExpressionParserRuleCall_1_3_0());
					}
					lv_value_7_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeRule());
						}
						set(
							$current,
							"value",
							lv_value_7_0,
							"org.eclipse.emf.henshin.text.Henshin_text.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleMultiRule
entryRuleMultiRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiRuleRule()); }
	iv_ruleMultiRule=ruleMultiRule
	{ $current=$iv_ruleMultiRule.current; }
	EOF;

// Rule MultiRule
ruleMultiRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='multiRule'
		{
			newLeafNode(otherlv_0, grammarAccess.getMultiRuleAccess().getMultiRuleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMultiRuleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiRuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMultiRuleAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiRuleAccess().getMultiruleElementsRuleElementParserRuleCall_3_0());
				}
				lv_multiruleElements_3_0=ruleRuleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiRuleRule());
					}
					add(
						$current,
						"multiruleElements",
						lv_multiruleElements_3_0,
						"org.eclipse.emf.henshin.text.Henshin_text.RuleElement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getMultiRuleAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleFormula
entryRuleFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaRule()); }
	iv_ruleFormula=ruleFormula
	{ $current=$iv_ruleFormula.current; }
	EOF;

// Rule Formula
ruleFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='matchingFormula'
		{
			newLeafNode(otherlv_0, grammarAccess.getFormulaAccess().getMatchingFormulaKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getFormulaAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='formula'
		{
			newLeafNode(otherlv_2, grammarAccess.getFormulaAccess().getFormulaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFormulaAccess().getFormulaLogicParserRuleCall_3_0());
				}
				lv_formula_3_0=ruleLogic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormulaRule());
					}
					set(
						$current,
						"formula",
						lv_formula_3_0,
						"org.eclipse.emf.henshin.text.Henshin_text.Logic");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFormulaAccess().getConditionGraphsConditionGraphParserRuleCall_4_0());
				}
				lv_conditionGraphs_4_0=ruleConditionGraph
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormulaRule());
					}
					add(
						$current,
						"conditionGraphs",
						lv_conditionGraphs_4_0,
						"org.eclipse.emf.henshin.text.Henshin_text.ConditionGraph");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getFormulaAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleLogic
entryRuleLogic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicRule()); }
	iv_ruleLogic=ruleLogic
	{ $current=$iv_ruleLogic.current; }
	EOF;

// Rule Logic
ruleLogic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getLogicAccess().getORorXORParserRuleCall());
	}
	this_ORorXOR_0=ruleORorXOR
	{
		$current = $this_ORorXOR_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleORorXOR
entryRuleORorXOR returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getORorXORRule()); }
	iv_ruleORorXOR=ruleORorXOR
	{ $current=$iv_ruleORorXOR.current; }
	EOF;

// Rule ORorXOR
ruleORorXOR returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getORorXORAccess().getANDParserRuleCall_0());
		}
		this_AND_0=ruleAND
		{
			$current = $this_AND_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getORorXORAccess().getORorXORLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='OR'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getORorXORAccess().getOpORKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getORorXORRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='XOR'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getORorXORAccess().getOpXORKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getORorXORRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getORorXORAccess().getRightANDParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAND
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getORorXORRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.emf.henshin.text.Henshin_text.AND");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAND
entryRuleAND returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getANDRule()); }
	iv_ruleAND=ruleAND
	{ $current=$iv_ruleAND.current; }
	EOF;

// Rule AND
ruleAND returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getANDAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getANDAccess().getANDLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='AND'
			{
				newLeafNode(otherlv_2, grammarAccess.getANDAccess().getANDKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getANDAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getANDRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.emf.henshin.text.Henshin_text.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getLogicParserRuleCall_0_1());
			}
			this_Logic_1=ruleLogic
			{
				$current = $this_Logic_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNotAction_1_0(),
						$current);
				}
			)
			otherlv_4='!'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getNegationPrimaryParserRuleCall_1_2_0());
					}
					lv_negation_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"negation",
							lv_negation_5_0,
							"org.eclipse.emf.henshin.text.Henshin_text.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2());
		}
		this_Atomic_6=ruleAtomic
		{
			$current = $this_Atomic_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	iv_ruleAtomic=ruleAtomic
	{ $current=$iv_ruleAtomic.current; }
	EOF;

// Rule Atomic
ruleAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAtomicAccess().getConditionGraphRefAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomicRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getAtomicAccess().getConditionGraphRefConditionGraphCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleConditionGraph
entryRuleConditionGraph returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionGraphRule()); }
	iv_ruleConditionGraph=ruleConditionGraph
	{ $current=$iv_ruleConditionGraph.current; }
	EOF;

// Rule ConditionGraph
ruleConditionGraph returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='conditionGraph'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionGraphAccess().getConditionGraphKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConditionGraphAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionGraphRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionGraphAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionGraphAccess().getConditionGraphElementsConditionGraphElementsParserRuleCall_3_0());
				}
				lv_conditionGraphElements_3_0=ruleConditionGraphElements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionGraphRule());
					}
					add(
						$current,
						"conditionGraphElements",
						lv_conditionGraphElements_3_0,
						"org.eclipse.emf.henshin.text.Henshin_text.ConditionGraphElements");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionGraphAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleConditionGraphElements
entryRuleConditionGraphElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionGraphElementsRule()); }
	iv_ruleConditionGraphElements=ruleConditionGraphElements
	{ $current=$iv_ruleConditionGraphElements.current; }
	EOF;

// Rule ConditionGraphElements
ruleConditionGraphElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditionGraphElementsAccess().getConditionEdgesParserRuleCall_0());
		}
		this_ConditionEdges_0=ruleConditionEdges
		{
			$current = $this_ConditionEdges_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConditionGraphElementsAccess().getConditionNodeParserRuleCall_1());
		}
		this_ConditionNode_1=ruleConditionNode
		{
			$current = $this_ConditionNode_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConditionGraphElementsAccess().getFormulaParserRuleCall_2());
		}
		this_Formula_2=ruleFormula
		{
			$current = $this_Formula_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConditionGraphElementsAccess().getConditionReuseNodeParserRuleCall_3());
		}
		this_ConditionReuseNode_3=ruleConditionReuseNode
		{
			$current = $this_ConditionReuseNode_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConditionEdges
entryRuleConditionEdges returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionEdgesRule()); }
	iv_ruleConditionEdges=ruleConditionEdges
	{ $current=$iv_ruleConditionEdges.current; }
	EOF;

// Rule ConditionEdges
ruleConditionEdges returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='edges'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionEdgesAccess().getEdgesKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionEdgesAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionEdgesAccess().getEdgesConditionEdgeParserRuleCall_2_0());
				}
				lv_edges_2_0=ruleConditionEdge
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionEdgesRule());
					}
					add(
						$current,
						"edges",
						lv_edges_2_0,
						"org.eclipse.emf.henshin.text.Henshin_text.ConditionEdge");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getConditionEdgesAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionEdgesAccess().getEdgesConditionEdgeParserRuleCall_3_1_0());
					}
					lv_edges_4_0=ruleConditionEdge
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionEdgesRule());
						}
						add(
							$current,
							"edges",
							lv_edges_4_0,
							"org.eclipse.emf.henshin.text.Henshin_text.ConditionEdge");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getConditionEdgesAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleConditionEdge
entryRuleConditionEdge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionEdgeRule()); }
	iv_ruleConditionEdge=ruleConditionEdge
	{ $current=$iv_ruleConditionEdge.current; }
	EOF;

// Rule ConditionEdge
ruleConditionEdge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionEdgeAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionEdgeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getConditionEdgeAccess().getSourceConditionNodeTypesCrossReference_1_0());
				}
			)
		)
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionEdgeAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionEdgeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getConditionEdgeAccess().getTargetConditionNodeTypesCrossReference_3_0());
				}
			)
		)
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionEdgeAccess().getColonKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionEdgeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getConditionEdgeAccess().getTypeEReferenceCrossReference_5_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getConditionEdgeAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleConditionNode
entryRuleConditionNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionNodeRule()); }
	iv_ruleConditionNode=ruleConditionNode
	{ $current=$iv_ruleConditionNode.current; }
	EOF;

// Rule ConditionNode
ruleConditionNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='node'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionNodeAccess().getNodeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConditionNodeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionNodeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionNodeAccess().getColonKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionNodeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getConditionNodeAccess().getTypeEClassCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionNodeAccess().getLeftCurlyBracketKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionNodeAccess().getAttributeMatchParserRuleCall_4_1_0());
					}
					lv_attribute_5_0=ruleMatch
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionNodeRule());
						}
						add(
							$current,
							"attribute",
							lv_attribute_5_0,
							"org.eclipse.emf.henshin.text.Henshin_text.Match");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getConditionNodeAccess().getRightCurlyBracketKeyword_4_2());
			}
		)?
	)
;

// Entry rule entryRuleConditionReuseNode
entryRuleConditionReuseNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionReuseNodeRule()); }
	iv_ruleConditionReuseNode=ruleConditionReuseNode
	{ $current=$iv_ruleConditionReuseNode.current; }
	EOF;

// Rule ConditionReuseNode
ruleConditionReuseNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='reuse'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionReuseNodeAccess().getReuseKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionReuseNodeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getConditionReuseNodeAccess().getNameConditionNodeTypesCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getConditionReuseNodeAccess().getLeftCurlyBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionReuseNodeAccess().getAttributeMatchParserRuleCall_2_1_0());
					}
					lv_attribute_3_0=ruleMatch
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionReuseNodeRule());
						}
						add(
							$current,
							"attribute",
							lv_attribute_3_0,
							"org.eclipse.emf.henshin.text.Henshin_text.Match");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionReuseNodeAccess().getRightCurlyBracketKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleMatch
entryRuleMatch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMatchRule()); }
	iv_ruleMatch=ruleMatch
	{ $current=$iv_ruleMatch.current; }
	EOF;

// Rule Match
ruleMatch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMatchRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getMatchAccess().getNameEAttributeCrossReference_0_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getMatchAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.emf.henshin.text.Henshin_text.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUnitElement
entryRuleUnitElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitElementRule()); }
	iv_ruleUnitElement=ruleUnitElement
	{ $current=$iv_ruleUnitElement.current; }
	EOF;

// Rule UnitElement
ruleUnitElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnitElementAccess().getCallAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUnitElementRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getUnitElementAccess().getElementCallModelElementCrossReference_0_1_0());
					}
				)
			)
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getUnitElementAccess().getLeftParenthesisKeyword_0_2());
			}
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getUnitElementRule());
							}
						}
						otherlv_3=RULE_ID
						{
							newLeafNode(otherlv_3, grammarAccess.getUnitElementAccess().getParametersParameterCrossReference_0_3_0_0());
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getUnitElementAccess().getCommaKeyword_0_3_1_0());
					}
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getUnitElementRule());
								}
							}
							otherlv_5=RULE_ID
							{
								newLeafNode(otherlv_5, grammarAccess.getUnitElementAccess().getParametersParameterCrossReference_0_3_1_1_0());
							}
						)
					)
				)*
			)?
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getUnitElementAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getUnitElementAccess().getLeftCurlyBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUnitElementAccess().getSubSequenceUnitElementParserRuleCall_1_1_0());
					}
					lv_subSequence_8_0=ruleUnitElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnitElementRule());
						}
						add(
							$current,
							"subSequence",
							lv_subSequence_8_0,
							"org.eclipse.emf.henshin.text.Henshin_text.UnitElement");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getUnitElementAccess().getRightCurlyBracketKeyword_1_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getUnitElementAccess().getSequentialPropertiesParserRuleCall_2());
		}
		this_SequentialProperties_10=ruleSequentialProperties
		{
			$current = $this_SequentialProperties_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitElementAccess().getIndependentUnitParserRuleCall_3());
		}
		this_IndependentUnit_11=ruleIndependentUnit
		{
			$current = $this_IndependentUnit_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitElementAccess().getConditionalUnitParserRuleCall_4());
		}
		this_ConditionalUnit_12=ruleConditionalUnit
		{
			$current = $this_ConditionalUnit_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitElementAccess().getPriorityUnitParserRuleCall_5());
		}
		this_PriorityUnit_13=rulePriorityUnit
		{
			$current = $this_PriorityUnit_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitElementAccess().getIteratedUnitParserRuleCall_6());
		}
		this_IteratedUnit_14=ruleIteratedUnit
		{
			$current = $this_IteratedUnit_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitElementAccess().getLoopUnitParserRuleCall_7());
		}
		this_LoopUnit_15=ruleLoopUnit
		{
			$current = $this_LoopUnit_15.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSequentialProperties
entryRuleSequentialProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSequentialPropertiesRule()); }
	iv_ruleSequentialProperties=ruleSequentialProperties
	{ $current=$iv_ruleSequentialProperties.current; }
	EOF;

// Rule SequentialProperties
ruleSequentialProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSequentialPropertiesAccess().getStrictParserRuleCall_0());
		}
		this_Strict_0=ruleStrict
		{
			$current = $this_Strict_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSequentialPropertiesAccess().getRollbackParserRuleCall_1());
		}
		this_Rollback_1=ruleRollback
		{
			$current = $this_Rollback_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStrict
entryRuleStrict returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStrictRule()); }
	iv_ruleStrict=ruleStrict
	{ $current=$iv_ruleStrict.current; }
	EOF;

// Rule Strict
ruleStrict returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='strict'
		{
			newLeafNode(otherlv_0, grammarAccess.getStrictAccess().getStrictKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStrictAccess().getStrictEBooleanParserRuleCall_1_0());
				}
				lv_strict_1_0=ruleEBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStrictRule());
					}
					set(
						$current,
						"strict",
						lv_strict_1_0,
						"org.eclipse.emf.henshin.text.Henshin_text.EBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRollback
entryRuleRollback returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRollbackRule()); }
	iv_ruleRollback=ruleRollback
	{ $current=$iv_ruleRollback.current; }
	EOF;

// Rule Rollback
ruleRollback returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rollback'
		{
			newLeafNode(otherlv_0, grammarAccess.getRollbackAccess().getRollbackKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRollbackAccess().getRollbackEBooleanParserRuleCall_1_0());
				}
				lv_rollback_1_0=ruleEBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRollbackRule());
					}
					set(
						$current,
						"rollback",
						lv_rollback_1_0,
						"org.eclipse.emf.henshin.text.Henshin_text.EBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleList
entryRuleList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListRule()); }
	iv_ruleList=ruleList
	{ $current=$iv_ruleList.current; }
	EOF;

// Rule List
ruleList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getListAccess().getSubElementsUnitElementParserRuleCall_0());
			}
			lv_subElements_0_0=ruleUnitElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getListRule());
				}
				add(
					$current,
					"subElements",
					lv_subElements_0_0,
					"org.eclipse.emf.henshin.text.Henshin_text.UnitElement");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleIndependentUnit
entryRuleIndependentUnit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndependentUnitRule()); }
	iv_ruleIndependentUnit=ruleIndependentUnit
	{ $current=$iv_ruleIndependentUnit.current; }
	EOF;

// Rule IndependentUnit
ruleIndependentUnit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='independent'
		{
			newLeafNode(otherlv_0, grammarAccess.getIndependentUnitAccess().getIndependentKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getIndependentUnitAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndependentUnitAccess().getListOfListsListParserRuleCall_2_0());
				}
				lv_listOfLists_2_0=ruleList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndependentUnitRule());
					}
					add(
						$current,
						"listOfLists",
						lv_listOfLists_2_0,
						"org.eclipse.emf.henshin.text.Henshin_text.List");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getIndependentUnitAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIndependentUnitAccess().getListOfListsListParserRuleCall_3_1_0());
					}
					lv_listOfLists_4_0=ruleList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIndependentUnitRule());
						}
						add(
							$current,
							"listOfLists",
							lv_listOfLists_4_0,
							"org.eclipse.emf.henshin.text.Henshin_text.List");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getIndependentUnitAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleConditionalUnit
entryRuleConditionalUnit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalUnitRule()); }
	iv_ruleConditionalUnit=ruleConditionalUnit
	{ $current=$iv_ruleConditionalUnit.current; }
	EOF;

// Rule ConditionalUnit
ruleConditionalUnit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalUnitAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionalUnitAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalUnitAccess().getIfUnitElementParserRuleCall_2_0());
				}
				lv_if_2_0=ruleUnitElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalUnitRule());
					}
					add(
						$current,
						"if",
						lv_if_2_0,
						"org.eclipse.emf.henshin.text.Henshin_text.UnitElement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getConditionalUnitAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='then'
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionalUnitAccess().getThenKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getConditionalUnitAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalUnitAccess().getThenUnitElementParserRuleCall_6_0());
				}
				lv_then_6_0=ruleUnitElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalUnitRule());
					}
					add(
						$current,
						"then",
						lv_then_6_0,
						"org.eclipse.emf.henshin.text.Henshin_text.UnitElement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getConditionalUnitAccess().getRightCurlyBracketKeyword_7());
		}
		(
			otherlv_8='else'
			{
				newLeafNode(otherlv_8, grammarAccess.getConditionalUnitAccess().getElseKeyword_8_0());
			}
			otherlv_9='{'
			{
				newLeafNode(otherlv_9, grammarAccess.getConditionalUnitAccess().getLeftCurlyBracketKeyword_8_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalUnitAccess().getElseUnitElementParserRuleCall_8_2_0());
					}
					lv_else_10_0=ruleUnitElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalUnitRule());
						}
						add(
							$current,
							"else",
							lv_else_10_0,
							"org.eclipse.emf.henshin.text.Henshin_text.UnitElement");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getConditionalUnitAccess().getRightCurlyBracketKeyword_8_3());
			}
		)?
	)
;

// Entry rule entryRulePriorityUnit
entryRulePriorityUnit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPriorityUnitRule()); }
	iv_rulePriorityUnit=rulePriorityUnit
	{ $current=$iv_rulePriorityUnit.current; }
	EOF;

// Rule PriorityUnit
rulePriorityUnit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='priority'
		{
			newLeafNode(otherlv_0, grammarAccess.getPriorityUnitAccess().getPriorityKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getPriorityUnitAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPriorityUnitAccess().getListOfListsListParserRuleCall_2_0());
				}
				lv_listOfLists_2_0=ruleList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPriorityUnitRule());
					}
					add(
						$current,
						"listOfLists",
						lv_listOfLists_2_0,
						"org.eclipse.emf.henshin.text.Henshin_text.List");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getPriorityUnitAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPriorityUnitAccess().getListOfListsListParserRuleCall_3_1_0());
					}
					lv_listOfLists_4_0=ruleList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPriorityUnitRule());
						}
						add(
							$current,
							"listOfLists",
							lv_listOfLists_4_0,
							"org.eclipse.emf.henshin.text.Henshin_text.List");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getPriorityUnitAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleIteratedUnit
entryRuleIteratedUnit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIteratedUnitRule()); }
	iv_ruleIteratedUnit=ruleIteratedUnit
	{ $current=$iv_ruleIteratedUnit.current; }
	EOF;

// Rule IteratedUnit
ruleIteratedUnit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIteratedUnitAccess().getIteratedUnitAction_0(),
					$current);
			}
		)
		otherlv_1='for'
		{
			newLeafNode(otherlv_1, grammarAccess.getIteratedUnitAccess().getForKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIteratedUnitAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIteratedUnitAccess().getIterationsExpressionParserRuleCall_3_0());
				}
				lv_iterations_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIteratedUnitRule());
					}
					set(
						$current,
						"iterations",
						lv_iterations_3_0,
						"org.eclipse.emf.henshin.text.Henshin_text.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIteratedUnitAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getIteratedUnitAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIteratedUnitAccess().getSubElementUnitElementParserRuleCall_6_0());
				}
				lv_subElement_6_0=ruleUnitElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIteratedUnitRule());
					}
					add(
						$current,
						"subElement",
						lv_subElement_6_0,
						"org.eclipse.emf.henshin.text.Henshin_text.UnitElement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getIteratedUnitAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleLoopUnit
entryRuleLoopUnit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopUnitRule()); }
	iv_ruleLoopUnit=ruleLoopUnit
	{ $current=$iv_ruleLoopUnit.current; }
	EOF;

// Rule LoopUnit
ruleLoopUnit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoopUnitAccess().getWhileKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getLoopUnitAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopUnitAccess().getSubElementUnitElementParserRuleCall_2_0());
				}
				lv_subElement_2_0=ruleUnitElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopUnitRule());
					}
					add(
						$current,
						"subElement",
						lv_subElement_2_0,
						"org.eclipse.emf.henshin.text.Henshin_text.UnitElement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getLoopUnitAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getKindParameterKindRuleEnumRuleCall_0_0());
				}
				lv_kind_0_0=ruleParameterKindRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"kind",
						lv_kind_0_0,
						"org.eclipse.emf.henshin.text.Henshin_text.ParameterKindRule");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeParameterTypeParserRuleCall_3_0());
				}
				lv_type_3_0=ruleParameterType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.eclipse.emf.henshin.text.Henshin_text.ParameterType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParameterType
entryRuleParameterType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterTypeRule()); }
	iv_ruleParameterType=ruleParameterType
	{ $current=$iv_ruleParameterType.current; }
	EOF;

// Rule ParameterType
ruleParameterType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterTypeAccess().getEnumTypeTypeEnumRuleCall_0_0());
				}
				lv_enumType_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterTypeRule());
					}
					set(
						$current,
						"enumType",
						lv_enumType_0_0,
						"org.eclipse.emf.henshin.text.Henshin_text.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterTypeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getParameterTypeAccess().getTypeEClassCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall());
	}
	this_OrExpression_0=ruleOrExpression
	{
		$current = $this_OrExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='OR'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrExpressionAccess().getORKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.emf.henshin.text.Henshin_text.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0());
		}
		this_EqualityExpression_0=ruleEqualityExpression
		{
			$current = $this_EqualityExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='AND'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getANDKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEqualityExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.emf.henshin.text.Henshin_text.EqualityExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	iv_ruleEqualityExpression=ruleEqualityExpression
	{ $current=$iv_ruleEqualityExpression.current; }
	EOF;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getComparisonExpressionParserRuleCall_0());
		}
		this_ComparisonExpression_0=ruleComparisonExpression
		{
			$current = $this_ComparisonExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='=='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='!='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparisonExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.emf.henshin.text.Henshin_text.ComparisonExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	iv_ruleComparisonExpression=ruleComparisonExpression
	{ $current=$iv_ruleComparisonExpression.current; }
	EOF;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonExpressionAccess().getPlusOrMinusExpressionParserRuleCall_0());
		}
		this_PlusOrMinusExpression_0=rulePlusOrMinusExpression
		{
			$current = $this_PlusOrMinusExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='>='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getComparisonExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='<='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getComparisonExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3='>'
						{
							newLeafNode(lv_op_2_3, grammarAccess.getComparisonExpressionAccess().getOpGreaterThanSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
						    |
						lv_op_2_4='<'
						{
							newLeafNode(lv_op_2_4, grammarAccess.getComparisonExpressionAccess().getOpLessThanSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightPlusOrMinusExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePlusOrMinusExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.emf.henshin.text.Henshin_text.PlusOrMinusExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlusOrMinusExpression
entryRulePlusOrMinusExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusOrMinusExpressionRule()); }
	iv_rulePlusOrMinusExpression=rulePlusOrMinusExpression
	{ $current=$iv_rulePlusOrMinusExpression.current; }
	EOF;

// Rule PlusOrMinusExpression
rulePlusOrMinusExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlusOrMinusExpressionAccess().getMulOrDivExpressionParserRuleCall_0());
		}
		this_MulOrDivExpression_0=ruleMulOrDivExpression
		{
			$current = $this_MulOrDivExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getPlusOrMinusExpressionAccess().getPlusExpressionLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getPlusOrMinusExpressionAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getPlusOrMinusExpressionAccess().getMinusExpressionLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getPlusOrMinusExpressionAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusOrMinusExpressionAccess().getRightMulOrDivExpressionParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMulOrDivExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusOrMinusExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"org.eclipse.emf.henshin.text.Henshin_text.MulOrDivExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulOrDivExpression
entryRuleMulOrDivExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulOrDivExpressionRule()); }
	iv_ruleMulOrDivExpression=ruleMulOrDivExpression
	{ $current=$iv_ruleMulOrDivExpression.current; }
	EOF;

// Rule MulOrDivExpression
ruleMulOrDivExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulOrDivExpressionAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMulOrDivExpressionAccess().getMulOrDivExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='*'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getMulOrDivExpressionAccess().getOpAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMulOrDivExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='/'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getMulOrDivExpressionAccess().getOpSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMulOrDivExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulOrDivExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulOrDivExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.emf.henshin.text.Henshin_text.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getBracketExpressionAction_0_0(),
						$current);
				}
			)
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionExpressionParserRuleCall_0_2_0());
					}
					lv_expression_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"org.eclipse.emf.henshin.text.Henshin_text.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getNotExpressionAction_1_0(),
						$current);
				}
			)
			otherlv_5='!'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryExpressionAccess().getExclamationMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_1_2_0());
					}
					lv_expression_6_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_6_0,
							"org.eclipse.emf.henshin.text.Henshin_text.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAtomicExpressionParserRuleCall_2());
		}
		this_AtomicExpression_7=ruleAtomicExpression
		{
			$current = $this_AtomicExpression_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	iv_ruleAtomicExpression=ruleAtomicExpression
	{ $current=$iv_ruleAtomicExpression.current; }
	EOF;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getParameterValueAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicExpressionRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getAtomicExpressionAccess().getValueParameterCrossReference_0_1_0());
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getJavaClassValueAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicExpressionAccess().getValueEStringParserRuleCall_1_1_0());
					}
					lv_value_3_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.emf.henshin.text.Henshin_text.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_1_2());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAtomicExpressionAccess().getJavaParameterExpressionParserRuleCall_1_3_0_0());
						}
						lv_javaParameter_5_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAtomicExpressionRule());
							}
							add(
								$current,
								"javaParameter",
								lv_javaParameter_5_0,
								"org.eclipse.emf.henshin.text.Henshin_text.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_6=','
					{
						newLeafNode(otherlv_6, grammarAccess.getAtomicExpressionAccess().getCommaKeyword_1_3_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAtomicExpressionAccess().getJavaParameterExpressionParserRuleCall_1_3_1_1_0());
							}
							lv_javaParameter_7_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAtomicExpressionRule());
								}
								add(
									$current,
									"javaParameter",
									lv_javaParameter_7_0,
									"org.eclipse.emf.henshin.text.Henshin_text.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_1_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getJavaAttributeValueAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicExpressionAccess().getValueJavaAttributeParserRuleCall_2_1_0());
					}
					lv_value_10_0=ruleJavaAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_10_0,
							"org.eclipse.emf.henshin.text.Henshin_text.JavaAttribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getStringValueAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_value_12_0=RULE_STRING
					{
						newLeafNode(lv_value_12_0, grammarAccess.getAtomicExpressionAccess().getValueSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_12_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getNumberValueAction_4_0(),
						$current);
				}
			)
			(
				(
					lv_value_14_0=RULE_DECIMAL
					{
						newLeafNode(lv_value_14_0, grammarAccess.getAtomicExpressionAccess().getValueDECIMALTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_14_0,
							"org.eclipse.emf.henshin.text.Henshin_text.DECIMAL");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getIntegerValueAction_5_0(),
						$current);
				}
			)
			(
				(
					lv_value_16_0=RULE_NEGATIVE
					{
						newLeafNode(lv_value_16_0, grammarAccess.getAtomicExpressionAccess().getValueNEGATIVETerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_16_0,
							"org.eclipse.emf.henshin.text.Henshin_text.NEGATIVE");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getNaturalValueAction_6_0(),
						$current);
				}
			)
			(
				(
					lv_value_18_0=RULE_INT
					{
						newLeafNode(lv_value_18_0, grammarAccess.getAtomicExpressionAccess().getValueINTTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_18_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getBoolValueAction_7_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicExpressionAccess().getValueEBooleanParserRuleCall_7_1_0());
					}
					lv_value_20_0=ruleEBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_20_0,
							"org.eclipse.emf.henshin.text.Henshin_text.EBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleJavaAttribute
entryRuleJavaAttribute returns [String current=null]:
	{ newCompositeNode(grammarAccess.getJavaAttributeRule()); }
	iv_ruleJavaAttribute=ruleJavaAttribute
	{ $current=$iv_ruleJavaAttribute.current.getText(); }
	EOF;

// Rule JavaAttribute
ruleJavaAttribute returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getJavaAttributeAccess().getIDTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJavaAttributeAccess().getFullStopKeyword_1());
		}
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getJavaAttributeAccess().getIDTerminalRuleCall_2());
		}
	)
;

// Rule ParameterKindRule
ruleParameterKindRule returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='IN'
			{
				$current = grammarAccess.getParameterKindRuleAccess().getINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getParameterKindRuleAccess().getINEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='OUT'
			{
				$current = grammarAccess.getParameterKindRuleAccess().getOUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getParameterKindRuleAccess().getOUTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='INOUT'
			{
				$current = grammarAccess.getParameterKindRuleAccess().getINOUTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getParameterKindRuleAccess().getINOUTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='VAR'
			{
				$current = grammarAccess.getParameterKindRuleAccess().getVAREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getParameterKindRuleAccess().getVAREnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule Type
ruleType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='EBigDecimal'
			{
				$current = grammarAccess.getTypeAccess().getEBigDecimalEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getEBigDecimalEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='EBigInteger'
			{
				$current = grammarAccess.getTypeAccess().getEBigIntegerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getEBigIntegerEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='EBoolean'
			{
				$current = grammarAccess.getTypeAccess().getEBooleanEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getEBooleanEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='EBooleanObject'
			{
				$current = grammarAccess.getTypeAccess().getEBooleanObjectEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTypeAccess().getEBooleanObjectEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='EByte'
			{
				$current = grammarAccess.getTypeAccess().getEByteEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTypeAccess().getEByteEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='EByteArray'
			{
				$current = grammarAccess.getTypeAccess().getEByteArrayEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getTypeAccess().getEByteArrayEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='EByteObject'
			{
				$current = grammarAccess.getTypeAccess().getEByteObjectEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getTypeAccess().getEByteObjectEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='EChar'
			{
				$current = grammarAccess.getTypeAccess().getECharEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getTypeAccess().getECharEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='ECharacterObject'
			{
				$current = grammarAccess.getTypeAccess().getECharacterObjectEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getTypeAccess().getECharacterObjectEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='EDate'
			{
				$current = grammarAccess.getTypeAccess().getEDateEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getTypeAccess().getEDateEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='EDiagnosticChain'
			{
				$current = grammarAccess.getTypeAccess().getEDiagnosticChainEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getTypeAccess().getEDiagnosticChainEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='EDouble'
			{
				$current = grammarAccess.getTypeAccess().getEDoubleEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getTypeAccess().getEDoubleEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='EDoubleObject'
			{
				$current = grammarAccess.getTypeAccess().getEDoubleObjectEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getTypeAccess().getEDoubleObjectEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='EEList'
			{
				$current = grammarAccess.getTypeAccess().getEEListEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getTypeAccess().getEEListEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='EEnumerator'
			{
				$current = grammarAccess.getTypeAccess().getEEnumeratorEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getTypeAccess().getEEnumeratorEnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15='EFeatureMap'
			{
				$current = grammarAccess.getTypeAccess().getEFeatureMapEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getTypeAccess().getEFeatureMapEnumLiteralDeclaration_15());
			}
		)
		    |
		(
			enumLiteral_16='EFeatureMapEntry'
			{
				$current = grammarAccess.getTypeAccess().getEFeatureMapEntryEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_16, grammarAccess.getTypeAccess().getEFeatureMapEntryEnumLiteralDeclaration_16());
			}
		)
		    |
		(
			enumLiteral_17='EFloat'
			{
				$current = grammarAccess.getTypeAccess().getEFloatEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_17, grammarAccess.getTypeAccess().getEFloatEnumLiteralDeclaration_17());
			}
		)
		    |
		(
			enumLiteral_18='EFloatObject'
			{
				$current = grammarAccess.getTypeAccess().getEFloatObjectEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_18, grammarAccess.getTypeAccess().getEFloatObjectEnumLiteralDeclaration_18());
			}
		)
		    |
		(
			enumLiteral_19='EInt'
			{
				$current = grammarAccess.getTypeAccess().getEIntEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_19, grammarAccess.getTypeAccess().getEIntEnumLiteralDeclaration_19());
			}
		)
		    |
		(
			enumLiteral_20='EIntegerObject'
			{
				$current = grammarAccess.getTypeAccess().getEIntegerObjectEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_20, grammarAccess.getTypeAccess().getEIntegerObjectEnumLiteralDeclaration_20());
			}
		)
		    |
		(
			enumLiteral_21='ETreeIterator'
			{
				$current = grammarAccess.getTypeAccess().getETreeIteratorEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_21, grammarAccess.getTypeAccess().getETreeIteratorEnumLiteralDeclaration_21());
			}
		)
		    |
		(
			enumLiteral_22='EInvocationTargetException'
			{
				$current = grammarAccess.getTypeAccess().getEInvocationTargetExceptionEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_22, grammarAccess.getTypeAccess().getEInvocationTargetExceptionEnumLiteralDeclaration_22());
			}
		)
		    |
		(
			enumLiteral_23='EJavaClass'
			{
				$current = grammarAccess.getTypeAccess().getEJavaClassEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_23, grammarAccess.getTypeAccess().getEJavaClassEnumLiteralDeclaration_23());
			}
		)
		    |
		(
			enumLiteral_24='EJavaObject'
			{
				$current = grammarAccess.getTypeAccess().getEJavaObjectEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_24, grammarAccess.getTypeAccess().getEJavaObjectEnumLiteralDeclaration_24());
			}
		)
		    |
		(
			enumLiteral_25='ELong'
			{
				$current = grammarAccess.getTypeAccess().getELongEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_25, grammarAccess.getTypeAccess().getELongEnumLiteralDeclaration_25());
			}
		)
		    |
		(
			enumLiteral_26='ELongObject'
			{
				$current = grammarAccess.getTypeAccess().getELongObjectEnumLiteralDeclaration_26().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_26, grammarAccess.getTypeAccess().getELongObjectEnumLiteralDeclaration_26());
			}
		)
		    |
		(
			enumLiteral_27='EMap'
			{
				$current = grammarAccess.getTypeAccess().getEMapEnumLiteralDeclaration_27().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_27, grammarAccess.getTypeAccess().getEMapEnumLiteralDeclaration_27());
			}
		)
		    |
		(
			enumLiteral_28='EResource'
			{
				$current = grammarAccess.getTypeAccess().getEResourceEnumLiteralDeclaration_28().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_28, grammarAccess.getTypeAccess().getEResourceEnumLiteralDeclaration_28());
			}
		)
		    |
		(
			enumLiteral_29='EResourceSet'
			{
				$current = grammarAccess.getTypeAccess().getEResourceSetEnumLiteralDeclaration_29().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_29, grammarAccess.getTypeAccess().getEResourceSetEnumLiteralDeclaration_29());
			}
		)
		    |
		(
			enumLiteral_30='EShort'
			{
				$current = grammarAccess.getTypeAccess().getEShortEnumLiteralDeclaration_30().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_30, grammarAccess.getTypeAccess().getEShortEnumLiteralDeclaration_30());
			}
		)
		    |
		(
			enumLiteral_31='EShortObject'
			{
				$current = grammarAccess.getTypeAccess().getEShortObjectEnumLiteralDeclaration_31().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_31, grammarAccess.getTypeAccess().getEShortObjectEnumLiteralDeclaration_31());
			}
		)
		    |
		(
			enumLiteral_32='EString'
			{
				$current = grammarAccess.getTypeAccess().getEStringEnumLiteralDeclaration_32().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_32, grammarAccess.getTypeAccess().getEStringEnumLiteralDeclaration_32());
			}
		)
	)
;

RULE_DECIMAL : '-'? ('0'..'9')+ '.' ('0'..'9')+;

RULE_NEGATIVE : '-' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
