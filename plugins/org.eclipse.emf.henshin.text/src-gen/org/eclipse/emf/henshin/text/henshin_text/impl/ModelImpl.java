/**
 * generated by Xtext 2.16.0
 */
package org.eclipse.emf.henshin.text.henshin_text.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.emf.henshin.text.henshin_text.EPackageImport;
import org.eclipse.emf.henshin.text.henshin_text.Henshin_textPackage;
import org.eclipse.emf.henshin.text.henshin_text.Model;
import org.eclipse.emf.henshin.text.henshin_text.ModelElement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.emf.henshin.text.henshin_text.impl.ModelImpl#getEPackageimports <em>EPackageimports</em>}</li>
 *   <li>{@link org.eclipse.emf.henshin.text.henshin_text.impl.ModelImpl#getTransformationsystem <em>Transformationsystem</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getEPackageimports() <em>EPackageimports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEPackageimports()
   * @generated
   * @ordered
   */
  protected EList<EPackageImport> ePackageimports;

  /**
   * The cached value of the '{@link #getTransformationsystem() <em>Transformationsystem</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransformationsystem()
   * @generated
   * @ordered
   */
  protected EList<ModelElement> transformationsystem;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Henshin_textPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EPackageImport> getEPackageimports()
  {
    if (ePackageimports == null)
    {
      ePackageimports = new EObjectContainmentEList<EPackageImport>(EPackageImport.class, this, Henshin_textPackage.MODEL__EPACKAGEIMPORTS);
    }
    return ePackageimports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ModelElement> getTransformationsystem()
  {
    if (transformationsystem == null)
    {
      transformationsystem = new EObjectContainmentEList<ModelElement>(ModelElement.class, this, Henshin_textPackage.MODEL__TRANSFORMATIONSYSTEM);
    }
    return transformationsystem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Henshin_textPackage.MODEL__EPACKAGEIMPORTS:
        return ((InternalEList<?>)getEPackageimports()).basicRemove(otherEnd, msgs);
      case Henshin_textPackage.MODEL__TRANSFORMATIONSYSTEM:
        return ((InternalEList<?>)getTransformationsystem()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Henshin_textPackage.MODEL__EPACKAGEIMPORTS:
        return getEPackageimports();
      case Henshin_textPackage.MODEL__TRANSFORMATIONSYSTEM:
        return getTransformationsystem();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Henshin_textPackage.MODEL__EPACKAGEIMPORTS:
        getEPackageimports().clear();
        getEPackageimports().addAll((Collection<? extends EPackageImport>)newValue);
        return;
      case Henshin_textPackage.MODEL__TRANSFORMATIONSYSTEM:
        getTransformationsystem().clear();
        getTransformationsystem().addAll((Collection<? extends ModelElement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Henshin_textPackage.MODEL__EPACKAGEIMPORTS:
        getEPackageimports().clear();
        return;
      case Henshin_textPackage.MODEL__TRANSFORMATIONSYSTEM:
        getTransformationsystem().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Henshin_textPackage.MODEL__EPACKAGEIMPORTS:
        return ePackageimports != null && !ePackageimports.isEmpty();
      case Henshin_textPackage.MODEL__TRANSFORMATIONSYSTEM:
        return transformationsystem != null && !transformationsystem.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
