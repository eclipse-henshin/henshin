/**
 * generated by Xtext 2.16.0
 */
package org.eclipse.emf.henshin.text.henshin_text.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.henshin.text.henshin_text.CheckDangling;
import org.eclipse.emf.henshin.text.henshin_text.Henshin_textPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Check Dangling</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.emf.henshin.text.henshin_text.impl.CheckDanglingImpl#isCheckDangling <em>Check Dangling</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CheckDanglingImpl extends RuleElementImpl implements CheckDangling
{
  /**
   * The default value of the '{@link #isCheckDangling() <em>Check Dangling</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCheckDangling()
   * @generated
   * @ordered
   */
  protected static final boolean CHECK_DANGLING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isCheckDangling() <em>Check Dangling</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCheckDangling()
   * @generated
   * @ordered
   */
  protected boolean checkDangling = CHECK_DANGLING_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CheckDanglingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Henshin_textPackage.Literals.CHECK_DANGLING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isCheckDangling()
  {
    return checkDangling;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCheckDangling(boolean newCheckDangling)
  {
    boolean oldCheckDangling = checkDangling;
    checkDangling = newCheckDangling;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Henshin_textPackage.CHECK_DANGLING__CHECK_DANGLING, oldCheckDangling, checkDangling));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Henshin_textPackage.CHECK_DANGLING__CHECK_DANGLING:
        return isCheckDangling();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Henshin_textPackage.CHECK_DANGLING__CHECK_DANGLING:
        setCheckDangling((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Henshin_textPackage.CHECK_DANGLING__CHECK_DANGLING:
        setCheckDangling(CHECK_DANGLING_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Henshin_textPackage.CHECK_DANGLING__CHECK_DANGLING:
        return checkDangling != CHECK_DANGLING_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (checkDangling: ");
    result.append(checkDangling);
    result.append(')');
    return result.toString();
  }

} //CheckDanglingImpl
