/**
 * generated by Xtext 2.16.0
 */
package org.eclipse.emf.henshin.text.henshin_text.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.henshin.text.henshin_text.Henshin_textPackage;
import org.eclipse.emf.henshin.text.henshin_text.InjectiveMatching;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Injective Matching</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.emf.henshin.text.henshin_text.impl.InjectiveMatchingImpl#isInjectiveMatching <em>Injective Matching</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InjectiveMatchingImpl extends RuleElementImpl implements InjectiveMatching
{
  /**
   * The default value of the '{@link #isInjectiveMatching() <em>Injective Matching</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInjectiveMatching()
   * @generated
   * @ordered
   */
  protected static final boolean INJECTIVE_MATCHING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isInjectiveMatching() <em>Injective Matching</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInjectiveMatching()
   * @generated
   * @ordered
   */
  protected boolean injectiveMatching = INJECTIVE_MATCHING_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InjectiveMatchingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Henshin_textPackage.Literals.INJECTIVE_MATCHING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isInjectiveMatching()
  {
    return injectiveMatching;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInjectiveMatching(boolean newInjectiveMatching)
  {
    boolean oldInjectiveMatching = injectiveMatching;
    injectiveMatching = newInjectiveMatching;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Henshin_textPackage.INJECTIVE_MATCHING__INJECTIVE_MATCHING, oldInjectiveMatching, injectiveMatching));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Henshin_textPackage.INJECTIVE_MATCHING__INJECTIVE_MATCHING:
        return isInjectiveMatching();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Henshin_textPackage.INJECTIVE_MATCHING__INJECTIVE_MATCHING:
        setInjectiveMatching((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Henshin_textPackage.INJECTIVE_MATCHING__INJECTIVE_MATCHING:
        setInjectiveMatching(INJECTIVE_MATCHING_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Henshin_textPackage.INJECTIVE_MATCHING__INJECTIVE_MATCHING:
        return injectiveMatching != INJECTIVE_MATCHING_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (injectiveMatching: ");
    result.append(injectiveMatching);
    result.append(')');
    return result.toString();
  }

} //InjectiveMatchingImpl
