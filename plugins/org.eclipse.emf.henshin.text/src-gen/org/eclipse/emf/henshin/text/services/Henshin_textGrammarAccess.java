/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.emf.henshin.text.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Henshin_textGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEPackageimportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEPackageimportsEPackageImportParserRuleCall_0_0 = (RuleCall)cEPackageimportsAssignment_0.eContents().get(0);
		private final Assignment cTransformationsystemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransformationsystemModelElementParserRuleCall_1_0 = (RuleCall)cTransformationsystemAssignment_1.eContents().get(0);
		
		////main element
		// Model:
		//	ePackageimports+=EPackageImport+ transformationsystem+=ModelElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//ePackageimports+=EPackageImport+ transformationsystem+=ModelElement*
		public Group getGroup() { return cGroup; }
		
		//ePackageimports+=EPackageImport+
		public Assignment getEPackageimportsAssignment_0() { return cEPackageimportsAssignment_0; }
		
		//EPackageImport
		public RuleCall getEPackageimportsEPackageImportParserRuleCall_0_0() { return cEPackageimportsEPackageImportParserRuleCall_0_0; }
		
		//transformationsystem+=ModelElement*
		public Assignment getTransformationsystemAssignment_1() { return cTransformationsystemAssignment_1; }
		
		//ModelElement
		public RuleCall getTransformationsystemModelElementParserRuleCall_1_0() { return cTransformationsystemModelElementParserRuleCall_1_0; }
	}
	public class EPackageImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.EPackageImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEPackageImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefEPackageCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefEPackageEStringParserRuleCall_1_0_1 = (RuleCall)cRefEPackageCrossReference_1_0.eContents().get(1);
		
		////EPackage import
		// EPackageImport:
		//	'ePackageImport' ref=[ecore::EPackage|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'ePackageImport' ref=[ecore::EPackage|EString]
		public Group getGroup() { return cGroup; }
		
		//'ePackageImport'
		public Keyword getEPackageImportKeyword_0() { return cEPackageImportKeyword_0; }
		
		//ref=[ecore::EPackage|EString]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[ecore::EPackage|EString]
		public CrossReference getRefEPackageCrossReference_1_0() { return cRefEPackageCrossReference_1_0; }
		
		//EString
		public RuleCall getRefEPackageEStringParserRuleCall_1_0_1() { return cRefEPackageEStringParserRuleCall_1_0_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.EString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//EString:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRuleKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cRuleAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Assignment cParametersAssignment_0_4_0 = (Assignment)cGroup_0_4.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_0_4_0_0 = (RuleCall)cParametersAssignment_0_4_0.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cGroup_0_4.eContents().get(1);
		private final Keyword cCommaKeyword_0_4_1_0 = (Keyword)cGroup_0_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_0_4_1_1 = (Assignment)cGroup_0_4_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_0_4_1_1_0 = (RuleCall)cParametersAssignment_0_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cRuleElementsAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cRuleElementsRuleElementParserRuleCall_0_7_0 = (RuleCall)cRuleElementsAssignment_0_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cUnitKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cUnitAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Assignment cParametersAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_1_4_0_0 = (RuleCall)cParametersAssignment_1_4_0.eContents().get(0);
		private final Group cGroup_1_4_1 = (Group)cGroup_1_4.eContents().get(1);
		private final Keyword cCommaKeyword_1_4_1_0 = (Keyword)cGroup_1_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_4_1_1 = (Assignment)cGroup_1_4_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_4_1_1_0 = (RuleCall)cParametersAssignment_1_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cUnitElementsAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cUnitElementsUnitElementParserRuleCall_1_7_0 = (RuleCall)cUnitElementsAssignment_1_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		
		////rule and unit definition
		// ModelElement:
		//	'rule' {Rule} name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' '{' ruleElements+=RuleElement+
		//	'}' | 'unit' {Unit} name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' '{'
		//	unitElements+=UnitElement+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' {Rule} name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' '{' ruleElements+=RuleElement+ '}' |
		//'unit' {Unit} name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' '{' unitElements+=UnitElement+ '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'rule' {Rule} name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' '{' ruleElements+=RuleElement+ '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'rule'
		public Keyword getRuleKeyword_0_0() { return cRuleKeyword_0_0; }
		
		//{Rule}
		public Action getRuleAction_0_1() { return cRuleAction_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3() { return cLeftParenthesisKeyword_0_3; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_0_4_0() { return cParametersAssignment_0_4_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_0_4_0_0() { return cParametersParameterParserRuleCall_0_4_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }
		
		//','
		public Keyword getCommaKeyword_0_4_1_0() { return cCommaKeyword_0_4_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_0_4_1_1() { return cParametersAssignment_0_4_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_0_4_1_1_0() { return cParametersParameterParserRuleCall_0_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_6() { return cLeftCurlyBracketKeyword_0_6; }
		
		//ruleElements+=RuleElement+
		public Assignment getRuleElementsAssignment_0_7() { return cRuleElementsAssignment_0_7; }
		
		//RuleElement
		public RuleCall getRuleElementsRuleElementParserRuleCall_0_7_0() { return cRuleElementsRuleElementParserRuleCall_0_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_8() { return cRightCurlyBracketKeyword_0_8; }
		
		//'unit' {Unit} name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' '{' unitElements+=UnitElement+ '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'unit'
		public Keyword getUnitKeyword_1_0() { return cUnitKeyword_1_0; }
		
		//{Unit}
		public Action getUnitAction_1_1() { return cUnitAction_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_4_0() { return cParametersAssignment_1_4_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_4_0_0() { return cParametersParameterParserRuleCall_1_4_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_1_4_1() { return cGroup_1_4_1; }
		
		//','
		public Keyword getCommaKeyword_1_4_1_0() { return cCommaKeyword_1_4_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_4_1_1() { return cParametersAssignment_1_4_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_4_1_1_0() { return cParametersParameterParserRuleCall_1_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_6() { return cLeftCurlyBracketKeyword_1_6; }
		
		//unitElements+=UnitElement+
		public Assignment getUnitElementsAssignment_1_7() { return cUnitElementsAssignment_1_7; }
		
		//UnitElement
		public RuleCall getUnitElementsUnitElementParserRuleCall_1_7_0() { return cUnitElementsUnitElementParserRuleCall_1_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_8() { return cRightCurlyBracketKeyword_1_8; }
	}
	public class RuleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.RuleElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJavaImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheckDanglingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInjectiveMatchingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConditionsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGraphParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////rule elements
		// RuleElement:
		//	JavaImport | CheckDangling | InjectiveMatching | Conditions | Graph;
		@Override public ParserRule getRule() { return rule; }
		
		//JavaImport | CheckDangling | InjectiveMatching | Conditions | Graph
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JavaImport
		public RuleCall getJavaImportParserRuleCall_0() { return cJavaImportParserRuleCall_0; }
		
		//CheckDangling
		public RuleCall getCheckDanglingParserRuleCall_1() { return cCheckDanglingParserRuleCall_1; }
		
		//InjectiveMatching
		public RuleCall getInjectiveMatchingParserRuleCall_2() { return cInjectiveMatchingParserRuleCall_2; }
		
		//Conditions
		public RuleCall getConditionsParserRuleCall_3() { return cConditionsParserRuleCall_3; }
		
		//Graph
		public RuleCall getGraphParserRuleCall_4() { return cGraphParserRuleCall_4; }
	}
	public class JavaImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.JavaImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJavaImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackagenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackagenameEStringParserRuleCall_1_0 = (RuleCall)cPackagenameAssignment_1.eContents().get(0);
		
		////Java class import
		// JavaImport:
		//	'javaImport' packagename=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'javaImport' packagename=EString
		public Group getGroup() { return cGroup; }
		
		//'javaImport'
		public Keyword getJavaImportKeyword_0() { return cJavaImportKeyword_0; }
		
		//packagename=EString
		public Assignment getPackagenameAssignment_1() { return cPackagenameAssignment_1; }
		
		//EString
		public RuleCall getPackagenameEStringParserRuleCall_1_0() { return cPackagenameEStringParserRuleCall_1_0; }
	}
	public class CheckDanglingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.CheckDangling");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckDanglingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCheckDanglingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCheckDanglingEBooleanParserRuleCall_1_0 = (RuleCall)cCheckDanglingAssignment_1.eContents().get(0);
		
		////option CheckDangling  
		// CheckDangling:
		//	'checkDangling' checkDangling=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//'checkDangling' checkDangling=EBoolean
		public Group getGroup() { return cGroup; }
		
		//'checkDangling'
		public Keyword getCheckDanglingKeyword_0() { return cCheckDanglingKeyword_0; }
		
		//checkDangling=EBoolean
		public Assignment getCheckDanglingAssignment_1() { return cCheckDanglingAssignment_1; }
		
		//EBoolean
		public RuleCall getCheckDanglingEBooleanParserRuleCall_1_0() { return cCheckDanglingEBooleanParserRuleCall_1_0; }
	}
	public class InjectiveMatchingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.InjectiveMatching");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInjectiveMatchingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInjectiveMatchingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInjectiveMatchingEBooleanParserRuleCall_1_0 = (RuleCall)cInjectiveMatchingAssignment_1.eContents().get(0);
		
		////option InjectiveMatching
		// InjectiveMatching:
		//	'injectiveMatching' injectiveMatching=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//'injectiveMatching' injectiveMatching=EBoolean
		public Group getGroup() { return cGroup; }
		
		//'injectiveMatching'
		public Keyword getInjectiveMatchingKeyword_0() { return cInjectiveMatchingKeyword_0; }
		
		//injectiveMatching=EBoolean
		public Assignment getInjectiveMatchingAssignment_1() { return cInjectiveMatchingAssignment_1; }
		
		//EBoolean
		public RuleCall getInjectiveMatchingEBooleanParserRuleCall_1_0() { return cInjectiveMatchingEBooleanParserRuleCall_1_0; }
	}
	public class ConditionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Conditions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeConditionsExpressionParserRuleCall_2_0 = (RuleCall)cAttributeConditionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributeConditionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributeConditionsExpressionParserRuleCall_3_1_0 = (RuleCall)cAttributeConditionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Conditions (henshin:attributeCondition) 
		// Conditions:
		//	'conditions' '[' attributeConditions+=Expression ("," attributeConditions+=Expression)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'conditions' '[' attributeConditions+=Expression ("," attributeConditions+=Expression)* ']'
		public Group getGroup() { return cGroup; }
		
		//'conditions'
		public Keyword getConditionsKeyword_0() { return cConditionsKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//attributeConditions+=Expression
		public Assignment getAttributeConditionsAssignment_2() { return cAttributeConditionsAssignment_2; }
		
		//Expression
		public RuleCall getAttributeConditionsExpressionParserRuleCall_2_0() { return cAttributeConditionsExpressionParserRuleCall_2_0; }
		
		//("," attributeConditions+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//attributeConditions+=Expression
		public Assignment getAttributeConditionsAssignment_3_1() { return cAttributeConditionsAssignment_3_1; }
		
		//Expression
		public RuleCall getAttributeConditionsExpressionParserRuleCall_3_1_0() { return cAttributeConditionsExpressionParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGraphKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGraphElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGraphElementsGraphElementsParserRuleCall_3_0 = (RuleCall)cGraphElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////transformation graph
		// Graph:
		//	{Graph} 'graph' '{' graphElements+=GraphElements* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Graph} 'graph' '{' graphElements+=GraphElements* '}'
		public Group getGroup() { return cGroup; }
		
		//{Graph}
		public Action getGraphAction_0() { return cGraphAction_0; }
		
		//'graph'
		public Keyword getGraphKeyword_1() { return cGraphKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//graphElements+=GraphElements*
		public Assignment getGraphElementsAssignment_3() { return cGraphElementsAssignment_3; }
		
		//GraphElements
		public RuleCall getGraphElementsGraphElementsParserRuleCall_3_0() { return cGraphElementsGraphElementsParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ActionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ActionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPreserveKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCreateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDeleteKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cForbidKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRequireKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		////marks for nodes and edges (default:preserve)
		// ActionType:
		//	'preserve' | 'create' | 'delete' | 'forbid' | 'require';
		@Override public ParserRule getRule() { return rule; }
		
		//'preserve' | 'create' | 'delete' | 'forbid' | 'require'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'preserve'
		public Keyword getPreserveKeyword_0() { return cPreserveKeyword_0; }
		
		//'create'
		public Keyword getCreateKeyword_1() { return cCreateKeyword_1; }
		
		//'delete'
		public Keyword getDeleteKeyword_2() { return cDeleteKeyword_2; }
		
		//'forbid'
		public Keyword getForbidKeyword_3() { return cForbidKeyword_3; }
		
		//'require'
		public Keyword getRequireKeyword_4() { return cRequireKeyword_4; }
	}
	public class GraphElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.GraphElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEdgesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFormulaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMultiRuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMultiRuleReuseNodeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////transformation graph elements
		// GraphElements:
		//	Edges | Node | Formula | MultiRule | MultiRuleReuseNode;
		@Override public ParserRule getRule() { return rule; }
		
		//Edges | Node | Formula | MultiRule | MultiRuleReuseNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Edges
		public RuleCall getEdgesParserRuleCall_0() { return cEdgesParserRuleCall_0; }
		
		//Node
		public RuleCall getNodeParserRuleCall_1() { return cNodeParserRuleCall_1; }
		
		//Formula
		public RuleCall getFormulaParserRuleCall_2() { return cFormulaParserRuleCall_2; }
		
		//MultiRule
		public RuleCall getMultiRuleParserRuleCall_3() { return cMultiRuleParserRuleCall_3; }
		
		//MultiRuleReuseNode
		public RuleCall getMultiRuleReuseNodeParserRuleCall_4() { return cMultiRuleReuseNodeParserRuleCall_4; }
	}
	public class EdgesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Edges");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEdgesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEdgesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEdgesEdgeParserRuleCall_2_0 = (RuleCall)cEdgesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEdgesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEdgesEdgeParserRuleCall_3_1_0 = (RuleCall)cEdgesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////list of transformation graph edges
		// Edges:
		//	'edges' '[' edges+=Edge (',' edges+=Edge)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'edges' '[' edges+=Edge (',' edges+=Edge)* ']'
		public Group getGroup() { return cGroup; }
		
		//'edges'
		public Keyword getEdgesKeyword_0() { return cEdgesKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//edges+=Edge
		public Assignment getEdgesAssignment_2() { return cEdgesAssignment_2; }
		
		//Edge
		public RuleCall getEdgesEdgeParserRuleCall_2_0() { return cEdgesEdgeParserRuleCall_2_0; }
		
		//(',' edges+=Edge)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//edges+=Edge
		public Assignment getEdgesAssignment_3_1() { return cEdgesAssignment_3_1; }
		
		//Edge
		public RuleCall getEdgesEdgeParserRuleCall_3_1_0() { return cEdgesEdgeParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class EdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Edge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActiontypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActiontypeActionTypeParserRuleCall_1_0 = (RuleCall)cActiontypeAssignment_1.eContents().get(0);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceRuleNodeTypesCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceRuleNodeTypesIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceRuleNodeTypesCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetRuleNodeTypesCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetRuleNodeTypesIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetRuleNodeTypesCrossReference_4_0.eContents().get(1);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTypeEReferenceCrossReference_6_0 = (CrossReference)cTypeAssignment_6.eContents().get(0);
		private final RuleCall cTypeEReferenceEStringParserRuleCall_6_0_1 = (RuleCall)cTypeEReferenceCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////transformation graph edge (default:preserve)
		// Edge:
		//	'(' actiontype=ActionType? source=[RuleNodeTypes] '->' target=[RuleNodeTypes] ':' type=[ecore::EReference|EString]
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' actiontype=ActionType? source=[RuleNodeTypes] '->' target=[RuleNodeTypes] ':' type=[ecore::EReference|EString] ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//actiontype=ActionType?
		public Assignment getActiontypeAssignment_1() { return cActiontypeAssignment_1; }
		
		//ActionType
		public RuleCall getActiontypeActionTypeParserRuleCall_1_0() { return cActiontypeActionTypeParserRuleCall_1_0; }
		
		//source=[RuleNodeTypes]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[RuleNodeTypes]
		public CrossReference getSourceRuleNodeTypesCrossReference_2_0() { return cSourceRuleNodeTypesCrossReference_2_0; }
		
		//ID
		public RuleCall getSourceRuleNodeTypesIDTerminalRuleCall_2_0_1() { return cSourceRuleNodeTypesIDTerminalRuleCall_2_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//target=[RuleNodeTypes]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//[RuleNodeTypes]
		public CrossReference getTargetRuleNodeTypesCrossReference_4_0() { return cTargetRuleNodeTypesCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetRuleNodeTypesIDTerminalRuleCall_4_0_1() { return cTargetRuleNodeTypesIDTerminalRuleCall_4_0_1; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//type=[ecore::EReference|EString]
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//[ecore::EReference|EString]
		public CrossReference getTypeEReferenceCrossReference_6_0() { return cTypeEReferenceCrossReference_6_0; }
		
		//EString
		public RuleCall getTypeEReferenceEStringParserRuleCall_6_0_1() { return cTypeEReferenceEStringParserRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class RuleNodeTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.RuleNodeTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiRuleReuseNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////node types (Edge definition)
		// RuleNodeTypes:
		//	Node | MultiRuleReuseNode;
		@Override public ParserRule getRule() { return rule; }
		
		//Node | MultiRuleReuseNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }
		
		//MultiRuleReuseNode
		public RuleCall getMultiRuleReuseNodeParserRuleCall_1() { return cMultiRuleReuseNodeParserRuleCall_1; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActiontypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActiontypeActionTypeParserRuleCall_0_0 = (RuleCall)cActiontypeAssignment_0.eContents().get(0);
		private final Keyword cNodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNodetypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cNodetypeEClassCrossReference_4_0 = (CrossReference)cNodetypeAssignment_4.eContents().get(0);
		private final RuleCall cNodetypeEClassEStringParserRuleCall_4_0_1 = (RuleCall)cNodetypeEClassCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributeAttributeParserRuleCall_5_1_0 = (RuleCall)cAttributeAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		////transformation graph node
		// Node:
		//	actiontype=ActionType? 'node' name=ID ':' nodetype=[ecore::EClass|EString] ('{' attribute+=Attribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//actiontype=ActionType? 'node' name=ID ':' nodetype=[ecore::EClass|EString] ('{' attribute+=Attribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//actiontype=ActionType?
		public Assignment getActiontypeAssignment_0() { return cActiontypeAssignment_0; }
		
		//ActionType
		public RuleCall getActiontypeActionTypeParserRuleCall_0_0() { return cActiontypeActionTypeParserRuleCall_0_0; }
		
		//'node'
		public Keyword getNodeKeyword_1() { return cNodeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//nodetype=[ecore::EClass|EString]
		public Assignment getNodetypeAssignment_4() { return cNodetypeAssignment_4; }
		
		//[ecore::EClass|EString]
		public CrossReference getNodetypeEClassCrossReference_4_0() { return cNodetypeEClassCrossReference_4_0; }
		
		//EString
		public RuleCall getNodetypeEClassEStringParserRuleCall_4_0_1() { return cNodetypeEClassEStringParserRuleCall_4_0_1; }
		
		//('{' attribute+=Attribute* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//attribute+=Attribute*
		public Assignment getAttributeAssignment_5_1() { return cAttributeAssignment_5_1; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_5_1_0() { return cAttributeAttributeParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}
	public class MultiRuleReuseNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.MultiRuleReuseNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReuseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameNodeCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cNameNodeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributeAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributeAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		////reused transformation graph node (see documentation:MultiRule)
		// MultiRuleReuseNode:
		//	'reuse' name=[Node] ('{' attribute+=Attribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'reuse' name=[Node] ('{' attribute+=Attribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'reuse'
		public Keyword getReuseKeyword_0() { return cReuseKeyword_0; }
		
		//name=[Node]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Node]
		public CrossReference getNameNodeCrossReference_1_0() { return cNameNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getNameNodeIDTerminalRuleCall_1_0_1() { return cNameNodeIDTerminalRuleCall_1_0_1; }
		
		//('{' attribute+=Attribute* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attribute+=Attribute*
		public Assignment getAttributeAssignment_2_1() { return cAttributeAssignment_2_1; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_2_1_0() { return cAttributeAttributeParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cActiontypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cActiontypeActionTypeParserRuleCall_0_0_0 = (RuleCall)cActiontypeAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cNameEAttributeCrossReference_0_1_0 = (CrossReference)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cNameEAttributeEStringParserRuleCall_0_1_0_1 = (RuleCall)cNameEAttributeCrossReference_0_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUpdateAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cUpdateSetKeyword_1_0_0 = (Keyword)cUpdateAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cNameEAttributeCrossReference_1_1_0 = (CrossReference)cNameAssignment_1_1.eContents().get(0);
		private final RuleCall cNameEAttributeEStringParserRuleCall_1_1_0_1 = (RuleCall)cNameEAttributeCrossReference_1_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		
		////transformation graph node attribute
		// Attribute:
		//	actiontype=ActionType? name=[ecore::EAttribute|EString] '=' value=Expression | update='set'
		//	name=[ecore::EAttribute|EString] '=' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//actiontype=ActionType? name=[ecore::EAttribute|EString] '=' value=Expression | update='set'
		//name=[ecore::EAttribute|EString] '=' value=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//actiontype=ActionType? name=[ecore::EAttribute|EString] '=' value=Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//actiontype=ActionType?
		public Assignment getActiontypeAssignment_0_0() { return cActiontypeAssignment_0_0; }
		
		//ActionType
		public RuleCall getActiontypeActionTypeParserRuleCall_0_0_0() { return cActiontypeActionTypeParserRuleCall_0_0_0; }
		
		//name=[ecore::EAttribute|EString]
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//[ecore::EAttribute|EString]
		public CrossReference getNameEAttributeCrossReference_0_1_0() { return cNameEAttributeCrossReference_0_1_0; }
		
		//EString
		public RuleCall getNameEAttributeEStringParserRuleCall_0_1_0_1() { return cNameEAttributeEStringParserRuleCall_0_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }
		
		//value=Expression
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_0_3_0() { return cValueExpressionParserRuleCall_0_3_0; }
		
		//update='set' name=[ecore::EAttribute|EString] '=' value=Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//update='set'
		public Assignment getUpdateAssignment_1_0() { return cUpdateAssignment_1_0; }
		
		//'set'
		public Keyword getUpdateSetKeyword_1_0_0() { return cUpdateSetKeyword_1_0_0; }
		
		//name=[ecore::EAttribute|EString]
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//[ecore::EAttribute|EString]
		public CrossReference getNameEAttributeCrossReference_1_1_0() { return cNameEAttributeCrossReference_1_1_0; }
		
		//EString
		public RuleCall getNameEAttributeEStringParserRuleCall_1_1_0_1() { return cNameEAttributeEStringParserRuleCall_1_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//value=Expression
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_3_0() { return cValueExpressionParserRuleCall_1_3_0; }
	}
	public class MultiRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.MultiRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultiRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMultiruleElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultiruleElementsRuleElementParserRuleCall_3_0 = (RuleCall)cMultiruleElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////multi-rule (amalgamation)
		// MultiRule:
		//	'multiRule' name=ID '{' multiruleElements+=RuleElement+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'multiRule' name=ID '{' multiruleElements+=RuleElement+ '}'
		public Group getGroup() { return cGroup; }
		
		//'multiRule'
		public Keyword getMultiRuleKeyword_0() { return cMultiRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//multiruleElements+=RuleElement+
		public Assignment getMultiruleElementsAssignment_3() { return cMultiruleElementsAssignment_3; }
		
		//RuleElement
		public RuleCall getMultiruleElementsRuleElementParserRuleCall_3_0() { return cMultiruleElementsRuleElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Formula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchingFormulaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFormulaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFormulaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormulaLogicParserRuleCall_3_0 = (RuleCall)cFormulaAssignment_3.eContents().get(0);
		private final Assignment cConditionGraphsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionGraphsConditionGraphParserRuleCall_4_0 = (RuleCall)cConditionGraphsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////formula
		// Formula:
		//	'matchingFormula' '{' 'formula' formula=Logic conditionGraphs+=ConditionGraph+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'matchingFormula' '{' 'formula' formula=Logic conditionGraphs+=ConditionGraph+ '}'
		public Group getGroup() { return cGroup; }
		
		//'matchingFormula'
		public Keyword getMatchingFormulaKeyword_0() { return cMatchingFormulaKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'formula'
		public Keyword getFormulaKeyword_2() { return cFormulaKeyword_2; }
		
		//formula=Logic
		public Assignment getFormulaAssignment_3() { return cFormulaAssignment_3; }
		
		//Logic
		public RuleCall getFormulaLogicParserRuleCall_3_0() { return cFormulaLogicParserRuleCall_3_0; }
		
		//conditionGraphs+=ConditionGraph+
		public Assignment getConditionGraphsAssignment_4() { return cConditionGraphsAssignment_4; }
		
		//ConditionGraph
		public RuleCall getConditionGraphsConditionGraphParserRuleCall_4_0() { return cConditionGraphsConditionGraphParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LogicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Logic");
		private final RuleCall cORorXORParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////logical expressions
		// Logic:
		//	ORorXOR;
		@Override public ParserRule getRule() { return rule; }
		
		//ORorXOR
		public RuleCall getORorXORParserRuleCall() { return cORorXORParserRuleCall; }
	}
	public class ORorXORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ORorXOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cANDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cORorXORLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpORKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpXORKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightANDParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////logical expressions: OR and XOR
		// ORorXOR Logic:
		//	AND ({ORorXOR.left=current} op=('OR' | 'XOR') right=AND)*
		@Override public ParserRule getRule() { return rule; }
		
		//AND ({ORorXOR.left=current} op=('OR' | 'XOR') right=AND)*
		public Group getGroup() { return cGroup; }
		
		//AND
		public RuleCall getANDParserRuleCall_0() { return cANDParserRuleCall_0; }
		
		//({ORorXOR.left=current} op=('OR' | 'XOR') right=AND)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ORorXOR.left=current}
		public Action getORorXORLeftAction_1_0() { return cORorXORLeftAction_1_0; }
		
		//op=('OR' | 'XOR')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('OR' | 'XOR')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'OR'
		public Keyword getOpORKeyword_1_1_0_0() { return cOpORKeyword_1_1_0_0; }
		
		//'XOR'
		public Keyword getOpXORKeyword_1_1_0_1() { return cOpXORKeyword_1_1_0_1; }
		
		//right=AND
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AND
		public RuleCall getRightANDParserRuleCall_1_2_0() { return cRightANDParserRuleCall_1_2_0; }
	}
	public class ANDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.AND");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cANDLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////logical expressions: AND
		// AND Logic:
		//	Primary ({AND.left=current} 'AND' right=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({AND.left=current} 'AND' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({AND.left=current} 'AND' right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AND.left=current}
		public Action getANDLeftAction_1_0() { return cANDLeftAction_1_0; }
		
		//'AND'
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLogicParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNegationAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNegationPrimaryParserRuleCall_1_2_0 = (RuleCall)cNegationAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////logical expressions: brackets and NOT
		// Primary Logic:
		//	'(' Logic ')' | {Not} '!' negation=Primary | Atomic
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Logic ')' | {Not} '!' negation=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Logic ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Logic
		public RuleCall getLogicParserRuleCall_0_1() { return cLogicParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} '!' negation=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//negation=Primary
		public Assignment getNegationAssignment_1_2() { return cNegationAssignment_1_2; }
		
		//Primary
		public RuleCall getNegationPrimaryParserRuleCall_1_2_0() { return cNegationPrimaryParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Atomic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionGraphRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cConditionGraphRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cConditionGraphRefConditionGraphCrossReference_1_0 = (CrossReference)cConditionGraphRefAssignment_1.eContents().get(0);
		private final RuleCall cConditionGraphRefConditionGraphIDTerminalRuleCall_1_0_1 = (RuleCall)cConditionGraphRefConditionGraphCrossReference_1_0.eContents().get(1);
		
		////logical expressions: atomic value
		// Atomic Logic:
		//	{ConditionGraphRef} conditionGraphRef=[ConditionGraph]
		@Override public ParserRule getRule() { return rule; }
		
		//{ConditionGraphRef} conditionGraphRef=[ConditionGraph]
		public Group getGroup() { return cGroup; }
		
		//{ConditionGraphRef}
		public Action getConditionGraphRefAction_0() { return cConditionGraphRefAction_0; }
		
		//conditionGraphRef=[ConditionGraph]
		public Assignment getConditionGraphRefAssignment_1() { return cConditionGraphRefAssignment_1; }
		
		//[ConditionGraph]
		public CrossReference getConditionGraphRefConditionGraphCrossReference_1_0() { return cConditionGraphRefConditionGraphCrossReference_1_0; }
		
		//ID
		public RuleCall getConditionGraphRefConditionGraphIDTerminalRuleCall_1_0_1() { return cConditionGraphRefConditionGraphIDTerminalRuleCall_1_0_1; }
	}
	public class ConditionGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ConditionGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionGraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionGraphElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionGraphElementsConditionGraphElementsParserRuleCall_3_0 = (RuleCall)cConditionGraphElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////conditionGraph
		// ConditionGraph:
		//	'conditionGraph' name=ID '{' conditionGraphElements+=ConditionGraphElements* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'conditionGraph' name=ID '{' conditionGraphElements+=ConditionGraphElements* '}'
		public Group getGroup() { return cGroup; }
		
		//'conditionGraph'
		public Keyword getConditionGraphKeyword_0() { return cConditionGraphKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//conditionGraphElements+=ConditionGraphElements*
		public Assignment getConditionGraphElementsAssignment_3() { return cConditionGraphElementsAssignment_3; }
		
		//ConditionGraphElements
		public RuleCall getConditionGraphElementsConditionGraphElementsParserRuleCall_3_0() { return cConditionGraphElementsConditionGraphElementsParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConditionGraphElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ConditionGraphElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionEdgesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFormulaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConditionReuseNodeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////conditionGraph elements
		// ConditionGraphElements:
		//	ConditionEdges | ConditionNode | Formula | ConditionReuseNode;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionEdges | ConditionNode | Formula | ConditionReuseNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConditionEdges
		public RuleCall getConditionEdgesParserRuleCall_0() { return cConditionEdgesParserRuleCall_0; }
		
		//ConditionNode
		public RuleCall getConditionNodeParserRuleCall_1() { return cConditionNodeParserRuleCall_1; }
		
		//Formula
		public RuleCall getFormulaParserRuleCall_2() { return cFormulaParserRuleCall_2; }
		
		//ConditionReuseNode
		public RuleCall getConditionReuseNodeParserRuleCall_3() { return cConditionReuseNodeParserRuleCall_3; }
	}
	public class ConditionEdgesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ConditionEdges");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEdgesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEdgesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEdgesConditionEdgeParserRuleCall_2_0 = (RuleCall)cEdgesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEdgesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEdgesConditionEdgeParserRuleCall_3_1_0 = (RuleCall)cEdgesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////list of conditionGraph edges
		// ConditionEdges:
		//	'edges' '[' edges+=ConditionEdge ("," edges+=ConditionEdge)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'edges' '[' edges+=ConditionEdge ("," edges+=ConditionEdge)* ']'
		public Group getGroup() { return cGroup; }
		
		//'edges'
		public Keyword getEdgesKeyword_0() { return cEdgesKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//edges+=ConditionEdge
		public Assignment getEdgesAssignment_2() { return cEdgesAssignment_2; }
		
		//ConditionEdge
		public RuleCall getEdgesConditionEdgeParserRuleCall_2_0() { return cEdgesConditionEdgeParserRuleCall_2_0; }
		
		//("," edges+=ConditionEdge)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//edges+=ConditionEdge
		public Assignment getEdgesAssignment_3_1() { return cEdgesAssignment_3_1; }
		
		//ConditionEdge
		public RuleCall getEdgesConditionEdgeParserRuleCall_3_1_0() { return cEdgesConditionEdgeParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ConditionEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ConditionEdge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceConditionNodeTypesCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceConditionNodeTypesIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceConditionNodeTypesCrossReference_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetConditionNodeTypesCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetConditionNodeTypesIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetConditionNodeTypesCrossReference_3_0.eContents().get(1);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTypeEReferenceCrossReference_5_0 = (CrossReference)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeEReferenceEStringParserRuleCall_5_0_1 = (RuleCall)cTypeEReferenceCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////conditionGraph edge
		// ConditionEdge:
		//	'(' source=[ConditionNodeTypes] '->' target=[ConditionNodeTypes] ':' type=[ecore::EReference|EString] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' source=[ConditionNodeTypes] '->' target=[ConditionNodeTypes] ':' type=[ecore::EReference|EString] ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//source=[ConditionNodeTypes]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[ConditionNodeTypes]
		public CrossReference getSourceConditionNodeTypesCrossReference_1_0() { return cSourceConditionNodeTypesCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceConditionNodeTypesIDTerminalRuleCall_1_0_1() { return cSourceConditionNodeTypesIDTerminalRuleCall_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//target=[ConditionNodeTypes]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[ConditionNodeTypes]
		public CrossReference getTargetConditionNodeTypesCrossReference_3_0() { return cTargetConditionNodeTypesCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetConditionNodeTypesIDTerminalRuleCall_3_0_1() { return cTargetConditionNodeTypesIDTerminalRuleCall_3_0_1; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//type=[ecore::EReference|EString]
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//[ecore::EReference|EString]
		public CrossReference getTypeEReferenceCrossReference_5_0() { return cTypeEReferenceCrossReference_5_0; }
		
		//EString
		public RuleCall getTypeEReferenceEStringParserRuleCall_5_0_1() { return cTypeEReferenceEStringParserRuleCall_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ConditionNodeTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ConditionNodeTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////node types (ConditionEdge definition)
		// ConditionNodeTypes:
		//	ConditionNode | Node;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionNode | Node
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConditionNode
		public RuleCall getConditionNodeParserRuleCall_0() { return cConditionNodeParserRuleCall_0; }
		
		//Node
		public RuleCall getNodeParserRuleCall_1() { return cNodeParserRuleCall_1; }
	}
	public class ConditionNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ConditionNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeEClassCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeEClassEStringParserRuleCall_3_0_1 = (RuleCall)cTypeEClassCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttributeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttributeMatchParserRuleCall_4_1_0 = (RuleCall)cAttributeAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		////conditionGraph node
		// ConditionNode:
		//	'node' name=ID ':' type=[ecore::EClass|EString] ('{' attribute+=Match* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'node' name=ID ':' type=[ecore::EClass|EString] ('{' attribute+=Match* '}')?
		public Group getGroup() { return cGroup; }
		
		//'node'
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[ecore::EClass|EString]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[ecore::EClass|EString]
		public CrossReference getTypeEClassCrossReference_3_0() { return cTypeEClassCrossReference_3_0; }
		
		//EString
		public RuleCall getTypeEClassEStringParserRuleCall_3_0_1() { return cTypeEClassEStringParserRuleCall_3_0_1; }
		
		//('{' attribute+=Match* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//attribute+=Match*
		public Assignment getAttributeAssignment_4_1() { return cAttributeAssignment_4_1; }
		
		//Match
		public RuleCall getAttributeMatchParserRuleCall_4_1_0() { return cAttributeMatchParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class ConditionReuseNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ConditionReuseNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReuseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameConditionNodeTypesCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameConditionNodeTypesIDTerminalRuleCall_1_0_1 = (RuleCall)cNameConditionNodeTypesCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributeMatchParserRuleCall_2_1_0 = (RuleCall)cAttributeAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		////reused conditionGraph node (see documentation:ConditionGraph)
		// ConditionReuseNode:
		//	'reuse' name=[ConditionNodeTypes] ('{' attribute+=Match* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'reuse' name=[ConditionNodeTypes] ('{' attribute+=Match* '}')?
		public Group getGroup() { return cGroup; }
		
		//'reuse'
		public Keyword getReuseKeyword_0() { return cReuseKeyword_0; }
		
		//name=[ConditionNodeTypes]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[ConditionNodeTypes]
		public CrossReference getNameConditionNodeTypesCrossReference_1_0() { return cNameConditionNodeTypesCrossReference_1_0; }
		
		//ID
		public RuleCall getNameConditionNodeTypesIDTerminalRuleCall_1_0_1() { return cNameConditionNodeTypesIDTerminalRuleCall_1_0_1; }
		
		//('{' attribute+=Match* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attribute+=Match*
		public Assignment getAttributeAssignment_2_1() { return cAttributeAssignment_2_1; }
		
		//Match
		public RuleCall getAttributeMatchParserRuleCall_2_1_0() { return cAttributeMatchParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class MatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Match");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameEAttributeCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameEAttributeEStringParserRuleCall_0_0_1 = (RuleCall)cNameEAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////conditionGraph node attribute
		// Match:
		//	name=[ecore::EAttribute|EString] '=' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[ecore::EAttribute|EString] '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//name=[ecore::EAttribute|EString]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[ecore::EAttribute|EString]
		public CrossReference getNameEAttributeCrossReference_0_0() { return cNameEAttributeCrossReference_0_0; }
		
		//EString
		public RuleCall getNameEAttributeEStringParserRuleCall_0_0_1() { return cNameEAttributeEStringParserRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class UnitElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.UnitElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCallAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cElementCallAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cElementCallModelElementCrossReference_0_1_0 = (CrossReference)cElementCallAssignment_0_1.eContents().get(0);
		private final RuleCall cElementCallModelElementIDTerminalRuleCall_0_1_0_1 = (RuleCall)cElementCallModelElementCrossReference_0_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cParametersAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final CrossReference cParametersParameterCrossReference_0_3_0_0 = (CrossReference)cParametersAssignment_0_3_0.eContents().get(0);
		private final RuleCall cParametersParameterIDTerminalRuleCall_0_3_0_0_1 = (RuleCall)cParametersParameterCrossReference_0_3_0_0.eContents().get(1);
		private final Group cGroup_0_3_1 = (Group)cGroup_0_3.eContents().get(1);
		private final Keyword cCommaKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final CrossReference cParametersParameterCrossReference_0_3_1_1_0 = (CrossReference)cParametersAssignment_0_3_1_1.eContents().get(0);
		private final RuleCall cParametersParameterIDTerminalRuleCall_0_3_1_1_0_1 = (RuleCall)cParametersParameterCrossReference_0_3_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubSequenceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubSequenceUnitElementParserRuleCall_1_1_0 = (RuleCall)cSubSequenceAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cSequentialPropertiesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIndependentUnitParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConditionalUnitParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPriorityUnitParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIteratedUnitParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLoopUnitParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		////unit elements
		// UnitElement:
		//	{Call} elementCall=[ModelElement] '(' (parameters+=[Parameter] (',' parameters+=[Parameter])*)? ')' | '{'
		//	subSequence+=UnitElement+ '}' | SequentialProperties | IndependentUnit | ConditionalUnit | PriorityUnit |
		//	IteratedUnit | LoopUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//{Call} elementCall=[ModelElement] '(' (parameters+=[Parameter] (',' parameters+=[Parameter])*)? ')' | '{'
		//subSequence+=UnitElement+ '}' | SequentialProperties | IndependentUnit | ConditionalUnit | PriorityUnit | IteratedUnit
		//| LoopUnit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Call} elementCall=[ModelElement] '(' (parameters+=[Parameter] (',' parameters+=[Parameter])*)? ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Call}
		public Action getCallAction_0_0() { return cCallAction_0_0; }
		
		//elementCall=[ModelElement]
		public Assignment getElementCallAssignment_0_1() { return cElementCallAssignment_0_1; }
		
		//[ModelElement]
		public CrossReference getElementCallModelElementCrossReference_0_1_0() { return cElementCallModelElementCrossReference_0_1_0; }
		
		//ID
		public RuleCall getElementCallModelElementIDTerminalRuleCall_0_1_0_1() { return cElementCallModelElementIDTerminalRuleCall_0_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//(parameters+=[Parameter] (',' parameters+=[Parameter])*)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//parameters+=[Parameter]
		public Assignment getParametersAssignment_0_3_0() { return cParametersAssignment_0_3_0; }
		
		//[Parameter]
		public CrossReference getParametersParameterCrossReference_0_3_0_0() { return cParametersParameterCrossReference_0_3_0_0; }
		
		//ID
		public RuleCall getParametersParameterIDTerminalRuleCall_0_3_0_0_1() { return cParametersParameterIDTerminalRuleCall_0_3_0_0_1; }
		
		//(',' parameters+=[Parameter])*
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }
		
		//','
		public Keyword getCommaKeyword_0_3_1_0() { return cCommaKeyword_0_3_1_0; }
		
		//parameters+=[Parameter]
		public Assignment getParametersAssignment_0_3_1_1() { return cParametersAssignment_0_3_1_1; }
		
		//[Parameter]
		public CrossReference getParametersParameterCrossReference_0_3_1_1_0() { return cParametersParameterCrossReference_0_3_1_1_0; }
		
		//ID
		public RuleCall getParametersParameterIDTerminalRuleCall_0_3_1_1_0_1() { return cParametersParameterIDTerminalRuleCall_0_3_1_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//'{' subSequence+=UnitElement+ '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//subSequence+=UnitElement+
		public Assignment getSubSequenceAssignment_1_1() { return cSubSequenceAssignment_1_1; }
		
		//UnitElement
		public RuleCall getSubSequenceUnitElementParserRuleCall_1_1_0() { return cSubSequenceUnitElementParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
		
		//SequentialProperties
		public RuleCall getSequentialPropertiesParserRuleCall_2() { return cSequentialPropertiesParserRuleCall_2; }
		
		//IndependentUnit
		public RuleCall getIndependentUnitParserRuleCall_3() { return cIndependentUnitParserRuleCall_3; }
		
		//ConditionalUnit
		public RuleCall getConditionalUnitParserRuleCall_4() { return cConditionalUnitParserRuleCall_4; }
		
		//PriorityUnit
		public RuleCall getPriorityUnitParserRuleCall_5() { return cPriorityUnitParserRuleCall_5; }
		
		//IteratedUnit
		public RuleCall getIteratedUnitParserRuleCall_6() { return cIteratedUnitParserRuleCall_6; }
		
		//LoopUnit
		public RuleCall getLoopUnitParserRuleCall_7() { return cLoopUnitParserRuleCall_7; }
	}
	public class SequentialPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.SequentialProperties");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStrictParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRollbackParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////sequentialUnit properties
		// SequentialProperties:
		//	Strict | Rollback;
		@Override public ParserRule getRule() { return rule; }
		
		//Strict | Rollback
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Strict
		public RuleCall getStrictParserRuleCall_0() { return cStrictParserRuleCall_0; }
		
		//Rollback
		public RuleCall getRollbackParserRuleCall_1() { return cRollbackParserRuleCall_1; }
	}
	public class StrictElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Strict");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrictKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStrictAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStrictEBooleanParserRuleCall_1_0 = (RuleCall)cStrictAssignment_1.eContents().get(0);
		
		////option Strict
		// Strict:
		//	'strict' strict=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//'strict' strict=EBoolean
		public Group getGroup() { return cGroup; }
		
		//'strict'
		public Keyword getStrictKeyword_0() { return cStrictKeyword_0; }
		
		//strict=EBoolean
		public Assignment getStrictAssignment_1() { return cStrictAssignment_1; }
		
		//EBoolean
		public RuleCall getStrictEBooleanParserRuleCall_1_0() { return cStrictEBooleanParserRuleCall_1_0; }
	}
	public class RollbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Rollback");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRollbackKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRollbackAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRollbackEBooleanParserRuleCall_1_0 = (RuleCall)cRollbackAssignment_1.eContents().get(0);
		
		////option Rollback
		// Rollback:
		//	'rollback' rollback=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//'rollback' rollback=EBoolean
		public Group getGroup() { return cGroup; }
		
		//'rollback'
		public Keyword getRollbackKeyword_0() { return cRollbackKeyword_0; }
		
		//rollback=EBoolean
		public Assignment getRollbackAssignment_1() { return cRollbackAssignment_1; }
		
		//EBoolean
		public RuleCall getRollbackEBooleanParserRuleCall_1_0() { return cRollbackEBooleanParserRuleCall_1_0; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.List");
		private final Assignment cSubElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSubElementsUnitElementParserRuleCall_0 = (RuleCall)cSubElementsAssignment.eContents().get(0);
		
		////list of unit elements
		// List:
		//	subElements+=UnitElement+;
		@Override public ParserRule getRule() { return rule; }
		
		//subElements+=UnitElement+
		public Assignment getSubElementsAssignment() { return cSubElementsAssignment; }
		
		//UnitElement
		public RuleCall getSubElementsUnitElementParserRuleCall_0() { return cSubElementsUnitElementParserRuleCall_0; }
	}
	public class IndependentUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.IndependentUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndependentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListOfListsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListOfListsListParserRuleCall_2_0 = (RuleCall)cListOfListsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cListOfListsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cListOfListsListParserRuleCall_3_1_0 = (RuleCall)cListOfListsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////independentUnit
		// IndependentUnit:
		//	'independent' '[' listOfLists+=List (',' listOfLists+=List)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'independent' '[' listOfLists+=List (',' listOfLists+=List)* ']'
		public Group getGroup() { return cGroup; }
		
		//'independent'
		public Keyword getIndependentKeyword_0() { return cIndependentKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//listOfLists+=List
		public Assignment getListOfListsAssignment_2() { return cListOfListsAssignment_2; }
		
		//List
		public RuleCall getListOfListsListParserRuleCall_2_0() { return cListOfListsListParserRuleCall_2_0; }
		
		//(',' listOfLists+=List)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//listOfLists+=List
		public Assignment getListOfListsAssignment_3_1() { return cListOfListsAssignment_3_1; }
		
		//List
		public RuleCall getListOfListsListParserRuleCall_3_1_0() { return cListOfListsListParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ConditionalUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ConditionalUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfUnitElementParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThenUnitElementParserRuleCall_6_0 = (RuleCall)cThenAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cElseAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cElseUnitElementParserRuleCall_8_2_0 = (RuleCall)cElseAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		////conditionalUnit
		// ConditionalUnit:
		//	'if' '(' if+=UnitElement+ ')' 'then' '{' then+=UnitElement+ '}' ('else' '{' else+=UnitElement+ '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' if+=UnitElement+ ')' 'then' '{' then+=UnitElement+ '}' ('else' '{' else+=UnitElement+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//if+=UnitElement+
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }
		
		//UnitElement
		public RuleCall getIfUnitElementParserRuleCall_2_0() { return cIfUnitElementParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//then+=UnitElement+
		public Assignment getThenAssignment_6() { return cThenAssignment_6; }
		
		//UnitElement
		public RuleCall getThenUnitElementParserRuleCall_6_0() { return cThenUnitElementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//('else' '{' else+=UnitElement+ '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'else'
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//else+=UnitElement+
		public Assignment getElseAssignment_8_2() { return cElseAssignment_8_2; }
		
		//UnitElement
		public RuleCall getElseUnitElementParserRuleCall_8_2_0() { return cElseUnitElementParserRuleCall_8_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
	}
	public class PriorityUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.PriorityUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPriorityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListOfListsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListOfListsListParserRuleCall_2_0 = (RuleCall)cListOfListsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cListOfListsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cListOfListsListParserRuleCall_3_1_0 = (RuleCall)cListOfListsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////priorityUnit
		// PriorityUnit:
		//	'priority' '[' listOfLists+=List (',' listOfLists+=List)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'priority' '[' listOfLists+=List (',' listOfLists+=List)* ']'
		public Group getGroup() { return cGroup; }
		
		//'priority'
		public Keyword getPriorityKeyword_0() { return cPriorityKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//listOfLists+=List
		public Assignment getListOfListsAssignment_2() { return cListOfListsAssignment_2; }
		
		//List
		public RuleCall getListOfListsListParserRuleCall_2_0() { return cListOfListsListParserRuleCall_2_0; }
		
		//(',' listOfLists+=List)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//listOfLists+=List
		public Assignment getListOfListsAssignment_3_1() { return cListOfListsAssignment_3_1; }
		
		//List
		public RuleCall getListOfListsListParserRuleCall_3_1_0() { return cListOfListsListParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class IteratedUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.IteratedUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIteratedUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIterationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIterationsExpressionParserRuleCall_3_0 = (RuleCall)cIterationsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSubElementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSubElementUnitElementParserRuleCall_6_0 = (RuleCall)cSubElementAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////iteratedUnit
		// IteratedUnit:
		//	{IteratedUnit} 'for' '(' iterations=Expression ')' '{' subElement+=UnitElement+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{IteratedUnit} 'for' '(' iterations=Expression ')' '{' subElement+=UnitElement+ '}'
		public Group getGroup() { return cGroup; }
		
		//{IteratedUnit}
		public Action getIteratedUnitAction_0() { return cIteratedUnitAction_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//iterations=Expression
		public Assignment getIterationsAssignment_3() { return cIterationsAssignment_3; }
		
		//Expression
		public RuleCall getIterationsExpressionParserRuleCall_3_0() { return cIterationsExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//subElement+=UnitElement+
		public Assignment getSubElementAssignment_6() { return cSubElementAssignment_6; }
		
		//UnitElement
		public RuleCall getSubElementUnitElementParserRuleCall_6_0() { return cSubElementUnitElementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class LoopUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.LoopUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubElementUnitElementParserRuleCall_2_0 = (RuleCall)cSubElementAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////loopUnit
		// LoopUnit:
		//	'while' '{' subElement+=UnitElement+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '{' subElement+=UnitElement+ '}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//subElement+=UnitElement+
		public Assignment getSubElementAssignment_2() { return cSubElementAssignment_2; }
		
		//UnitElement
		public RuleCall getSubElementUnitElementParserRuleCall_2_0() { return cSubElementUnitElementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindParameterKindRuleEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeParameterTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		////parameter
		// Parameter:
		//	kind=ParameterKindRule? name=ID ':' type=ParameterType;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=ParameterKindRule? name=ID ':' type=ParameterType
		public Group getGroup() { return cGroup; }
		
		//kind=ParameterKindRule?
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//ParameterKindRule
		public RuleCall getKindParameterKindRuleEnumRuleCall_0_0() { return cKindParameterKindRuleEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=ParameterType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//ParameterType
		public RuleCall getTypeParameterTypeParserRuleCall_3_0() { return cTypeParameterTypeParserRuleCall_3_0; }
	}
	public class ParameterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ParameterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEnumTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEnumTypeTypeEnumRuleCall_0_0 = (RuleCall)cEnumTypeAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cTypeEClassCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEClassEStringParserRuleCall_1_0_1 = (RuleCall)cTypeEClassCrossReference_1_0.eContents().get(1);
		
		////parameter types
		// ParameterType:
		//	enumType=Type | type=[ecore::EClass|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//enumType=Type | type=[ecore::EClass|EString]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//enumType=Type
		public Assignment getEnumTypeAssignment_0() { return cEnumTypeAssignment_0; }
		
		//Type
		public RuleCall getEnumTypeTypeEnumRuleCall_0_0() { return cEnumTypeTypeEnumRuleCall_0_0; }
		
		//type=[ecore::EClass|EString]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[ecore::EClass|EString]
		public CrossReference getTypeEClassCrossReference_1_0() { return cTypeEClassCrossReference_1_0; }
		
		//EString
		public RuleCall getTypeEClassEStringParserRuleCall_1_0_1() { return cTypeEClassEStringParserRuleCall_1_0_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////boolean
		// EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Expression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////expressions
		// Expression:
		//	OrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////expressions: OR
		// OrExpression Expression:
		//	AndExpression ({OrExpression.left=current} "OR" right=AndExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({OrExpression.left=current} "OR" right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current} "OR" right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//"OR"
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////expressions: AND
		// AndExpression Expression:
		//	EqualityExpression ({AndExpression.left=current} "AND" right=EqualityExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({AndExpression.left=current} "AND" right=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({AndExpression.left=current} "AND" right=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//"AND"
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=EqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_2_0() { return cRightEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////expressions: equal and not equal  
		// EqualityExpression Expression:
		//	ComparisonExpression ({EqualityExpression.left=current} op=("==" | "!=") right=ComparisonExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonExpression ({EqualityExpression.left=current} op=("==" | "!=") right=ComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }
		
		//({EqualityExpression.left=current} op=("==" | "!=") right=ComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EqualityExpression.left=current}
		public Action getEqualityExpressionLeftAction_1_0() { return cEqualityExpressionLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=ComparisonExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ComparisonExpression
		public RuleCall getRightComparisonExpressionParserRuleCall_1_2_0() { return cRightComparisonExpressionParserRuleCall_1_2_0; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////expressions: relational operators 
		// ComparisonExpression Expression:
		//	PlusOrMinusExpression ({ComparisonExpression.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinusExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinusExpression ({ComparisonExpression.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinusExpression)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinusExpression
		public RuleCall getPlusOrMinusExpressionParserRuleCall_0() { return cPlusOrMinusExpressionParserRuleCall_0; }
		
		//({ComparisonExpression.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinusExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpression.left=current}
		public Action getComparisonExpressionLeftAction_1_0() { return cComparisonExpressionLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinusExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinusExpression
		public RuleCall getRightPlusOrMinusExpressionParserRuleCall_1_2_0() { return cRightPlusOrMinusExpressionParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.PlusOrMinusExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		////expressions: addition and subtraction 
		// PlusOrMinusExpression Expression:
		//	MulOrDivExpression (({PlusExpression.left=current} '+' | {MinusExpression.left=current} '-')
		//	right=MulOrDivExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDivExpression (({PlusExpression.left=current} '+' | {MinusExpression.left=current} '-') right=MulOrDivExpression)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDivExpression
		public RuleCall getMulOrDivExpressionParserRuleCall_0() { return cMulOrDivExpressionParserRuleCall_0; }
		
		//(({PlusExpression.left=current} '+' | {MinusExpression.left=current} '-') right=MulOrDivExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({PlusExpression.left=current} '+' | {MinusExpression.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{PlusExpression.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{PlusExpression.left=current}
		public Action getPlusExpressionLeftAction_1_0_0_0() { return cPlusExpressionLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{MinusExpression.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{MinusExpression.left=current}
		public Action getMinusExpressionLeftAction_1_0_1_0() { return cMinusExpressionLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulOrDivExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDivExpression
		public RuleCall getRightMulOrDivExpressionParserRuleCall_1_1_0() { return cRightMulOrDivExpressionParserRuleCall_1_1_0; }
	}
	public class MulOrDivExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.MulOrDivExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////expressions: multiplication and division
		// MulOrDivExpression Expression:
		//	PrimaryExpression ({MulOrDivExpression.left=current} op=('*' | '/') right=PrimaryExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({MulOrDivExpression.left=current} op=('*' | '/') right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({MulOrDivExpression.left=current} op=('*' | '/') right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDivExpression.left=current}
		public Action getMulOrDivExpressionLeftAction_1_0() { return cMulOrDivExpressionLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_2_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBracketExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////expressions: brackets and NOT
		// PrimaryExpression Expression:
		//	{BracketExpression} '(' expression=Expression ')' | {NotExpression} "!" expression=PrimaryExpression |
		//	AtomicExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{BracketExpression} '(' expression=Expression ')' | {NotExpression} "!" expression=PrimaryExpression | AtomicExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BracketExpression} '(' expression=Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{BracketExpression}
		public Action getBracketExpressionAction_0_0() { return cBracketExpressionAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{NotExpression} "!" expression=PrimaryExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{NotExpression}
		public Action getNotExpressionAction_1_0() { return cNotExpressionAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=PrimaryExpression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//PrimaryExpression
		public RuleCall getExpressionPrimaryExpressionParserRuleCall_1_2_0() { return cExpressionPrimaryExpressionParserRuleCall_1_2_0; }
		
		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_2() { return cAtomicExpressionParserRuleCall_2; }
	}
	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParameterValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cValueParameterCrossReference_0_1_0 = (CrossReference)cValueAssignment_0_1.eContents().get(0);
		private final RuleCall cValueParameterIDTerminalRuleCall_0_1_0_1 = (RuleCall)cValueParameterCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cJavaClassValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cJavaParameterAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cJavaParameterExpressionParserRuleCall_1_3_0_0 = (RuleCall)cJavaParameterAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Assignment cJavaParameterAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cJavaParameterExpressionParserRuleCall_1_3_1_1_0 = (RuleCall)cJavaParameterAssignment_1_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cJavaAttributeValueAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueJavaAttributeParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringValueAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cNumberValueAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueDECIMALTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cIntegerValueAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueNEGATIVETerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cNaturalValueAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cBoolValueAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_7_1_0 = (RuleCall)cValueAssignment_7_1.eContents().get(0);
		
		////expressions: atomic values
		// AtomicExpression Expression:
		//	{ParameterValue} value=[Parameter] | {JavaClassValue} value=EString '(' (javaParameter+=Expression (','
		//	javaParameter+=Expression)*)? ')' | {JavaAttributeValue} value=JavaAttribute | {StringValue} value=STRING |
		//	{NumberValue} value=DECIMAL | {IntegerValue} value=NEGATIVE | {NaturalValue} value=INT | {BoolValue} value=EBoolean
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterValue} value=[Parameter] | {JavaClassValue} value=EString '(' (javaParameter+=Expression (','
		//javaParameter+=Expression)*)? ')' | {JavaAttributeValue} value=JavaAttribute | {StringValue} value=STRING |
		//{NumberValue} value=DECIMAL | {IntegerValue} value=NEGATIVE | {NaturalValue} value=INT | {BoolValue} value=EBoolean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ParameterValue} value=[Parameter]
		public Group getGroup_0() { return cGroup_0; }
		
		//{ParameterValue}
		public Action getParameterValueAction_0_0() { return cParameterValueAction_0_0; }
		
		//value=[Parameter]
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//[Parameter]
		public CrossReference getValueParameterCrossReference_0_1_0() { return cValueParameterCrossReference_0_1_0; }
		
		//ID
		public RuleCall getValueParameterIDTerminalRuleCall_0_1_0_1() { return cValueParameterIDTerminalRuleCall_0_1_0_1; }
		
		//{JavaClassValue} value=EString '(' (javaParameter+=Expression (',' javaParameter+=Expression)*)? ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{JavaClassValue}
		public Action getJavaClassValueAction_1_0() { return cJavaClassValueAction_1_0; }
		
		//value=EString
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_1_1_0() { return cValueEStringParserRuleCall_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//(javaParameter+=Expression (',' javaParameter+=Expression)*)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//javaParameter+=Expression
		public Assignment getJavaParameterAssignment_1_3_0() { return cJavaParameterAssignment_1_3_0; }
		
		//Expression
		public RuleCall getJavaParameterExpressionParserRuleCall_1_3_0_0() { return cJavaParameterExpressionParserRuleCall_1_3_0_0; }
		
		//(',' javaParameter+=Expression)*
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//','
		public Keyword getCommaKeyword_1_3_1_0() { return cCommaKeyword_1_3_1_0; }
		
		//javaParameter+=Expression
		public Assignment getJavaParameterAssignment_1_3_1_1() { return cJavaParameterAssignment_1_3_1_1; }
		
		//Expression
		public RuleCall getJavaParameterExpressionParserRuleCall_1_3_1_1_0() { return cJavaParameterExpressionParserRuleCall_1_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//{JavaAttributeValue} value=JavaAttribute
		public Group getGroup_2() { return cGroup_2; }
		
		//{JavaAttributeValue}
		public Action getJavaAttributeValueAction_2_0() { return cJavaAttributeValueAction_2_0; }
		
		//value=JavaAttribute
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//JavaAttribute
		public RuleCall getValueJavaAttributeParserRuleCall_2_1_0() { return cValueJavaAttributeParserRuleCall_2_1_0; }
		
		//{StringValue} value=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{StringValue}
		public Action getStringValueAction_3_0() { return cStringValueAction_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
		
		//{NumberValue} value=DECIMAL
		public Group getGroup_4() { return cGroup_4; }
		
		//{NumberValue}
		public Action getNumberValueAction_4_0() { return cNumberValueAction_4_0; }
		
		//value=DECIMAL
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_4_1_0() { return cValueDECIMALTerminalRuleCall_4_1_0; }
		
		//{IntegerValue} value=NEGATIVE
		public Group getGroup_5() { return cGroup_5; }
		
		//{IntegerValue}
		public Action getIntegerValueAction_5_0() { return cIntegerValueAction_5_0; }
		
		//value=NEGATIVE
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//NEGATIVE
		public RuleCall getValueNEGATIVETerminalRuleCall_5_1_0() { return cValueNEGATIVETerminalRuleCall_5_1_0; }
		
		//{NaturalValue} value=INT
		public Group getGroup_6() { return cGroup_6; }
		
		//{NaturalValue}
		public Action getNaturalValueAction_6_0() { return cNaturalValueAction_6_0; }
		
		//value=INT
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_6_1_0() { return cValueINTTerminalRuleCall_6_1_0; }
		
		//{BoolValue} value=EBoolean
		public Group getGroup_7() { return cGroup_7; }
		
		//{BoolValue}
		public Action getBoolValueAction_7_0() { return cBoolValueAction_7_0; }
		
		//value=EBoolean
		public Assignment getValueAssignment_7_1() { return cValueAssignment_7_1; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_7_1_0() { return cValueEBooleanParserRuleCall_7_1_0; }
	}
	public class JavaAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.JavaAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//JavaAttribute:
		//	ID '.' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID '.' ID
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	
	public class ParameterKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ParameterKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNKNOWNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNKNOWNUNKNOWNKeyword_0_0 = (Keyword)cUNKNOWNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cININKeyword_1_0 = (Keyword)cINEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOUTOUTKeyword_2_0 = (Keyword)cOUTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINOUTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINOUTINOUTKeyword_3_0 = (Keyword)cINOUTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cVAREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cVARVARKeyword_4_0 = (Keyword)cVAREnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ParameterKind:
		//	UNKNOWN | IN | OUT | INOUT | VAR;
		public EnumRule getRule() { return rule; }
		
		//UNKNOWN | IN | OUT | INOUT | VAR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNKNOWN
		public EnumLiteralDeclaration getUNKNOWNEnumLiteralDeclaration_0() { return cUNKNOWNEnumLiteralDeclaration_0; }
		
		//"UNKNOWN"
		public Keyword getUNKNOWNUNKNOWNKeyword_0_0() { return cUNKNOWNUNKNOWNKeyword_0_0; }
		
		//IN
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_1() { return cINEnumLiteralDeclaration_1; }
		
		//"IN"
		public Keyword getININKeyword_1_0() { return cININKeyword_1_0; }
		
		//OUT
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_2() { return cOUTEnumLiteralDeclaration_2; }
		
		//"OUT"
		public Keyword getOUTOUTKeyword_2_0() { return cOUTOUTKeyword_2_0; }
		
		//INOUT
		public EnumLiteralDeclaration getINOUTEnumLiteralDeclaration_3() { return cINOUTEnumLiteralDeclaration_3; }
		
		//"INOUT"
		public Keyword getINOUTINOUTKeyword_3_0() { return cINOUTINOUTKeyword_3_0; }
		
		//VAR
		public EnumLiteralDeclaration getVAREnumLiteralDeclaration_4() { return cVAREnumLiteralDeclaration_4; }
		
		//"VAR"
		public Keyword getVARVARKeyword_4_0() { return cVARVARKeyword_4_0; }
	}
	public class ParameterKindRuleElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.ParameterKindRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cININKeyword_0_0 = (Keyword)cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTOUTKeyword_1_0 = (Keyword)cOUTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINOUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINOUTINOUTKeyword_2_0 = (Keyword)cINOUTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cVAREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cVARVARKeyword_3_0 = (Keyword)cVAREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ParameterKindRule returns ParameterKind:
		//	IN | OUT | INOUT | VAR;
		public EnumRule getRule() { return rule; }
		
		//IN | OUT | INOUT | VAR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IN
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() { return cINEnumLiteralDeclaration_0; }
		
		//'IN'
		public Keyword getININKeyword_0_0() { return cININKeyword_0_0; }
		
		//OUT
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_1() { return cOUTEnumLiteralDeclaration_1; }
		
		//'OUT'
		public Keyword getOUTOUTKeyword_1_0() { return cOUTOUTKeyword_1_0; }
		
		//INOUT
		public EnumLiteralDeclaration getINOUTEnumLiteralDeclaration_2() { return cINOUTEnumLiteralDeclaration_2; }
		
		//'INOUT'
		public Keyword getINOUTINOUTKeyword_2_0() { return cINOUTINOUTKeyword_2_0; }
		
		//VAR
		public EnumLiteralDeclaration getVAREnumLiteralDeclaration_3() { return cVAREnumLiteralDeclaration_3; }
		
		//'VAR'
		public Keyword getVARVARKeyword_3_0() { return cVARVARKeyword_3_0; }
	}
	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEBigDecimalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEBigDecimalEBigDecimalKeyword_0_0 = (Keyword)cEBigDecimalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEBigIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEBigIntegerEBigIntegerKeyword_1_0 = (Keyword)cEBigIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEBooleanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEBooleanEBooleanKeyword_2_0 = (Keyword)cEBooleanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEBooleanObjectEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEBooleanObjectEBooleanObjectKeyword_3_0 = (Keyword)cEBooleanObjectEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEByteEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEByteEByteKeyword_4_0 = (Keyword)cEByteEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cEByteArrayEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cEByteArrayEByteArrayKeyword_5_0 = (Keyword)cEByteArrayEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cEByteObjectEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cEByteObjectEByteObjectKeyword_6_0 = (Keyword)cEByteObjectEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cECharEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cECharECharKeyword_7_0 = (Keyword)cECharEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cECharacterObjectEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cECharacterObjectECharacterObjectKeyword_8_0 = (Keyword)cECharacterObjectEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cEDateEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cEDateEDateKeyword_9_0 = (Keyword)cEDateEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cEDiagnosticChainEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cEDiagnosticChainEDiagnosticChainKeyword_10_0 = (Keyword)cEDiagnosticChainEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cEDoubleEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cEDoubleEDoubleKeyword_11_0 = (Keyword)cEDoubleEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cEDoubleObjectEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cEDoubleObjectEDoubleObjectKeyword_12_0 = (Keyword)cEDoubleObjectEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cEEListEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cEEListEEListKeyword_13_0 = (Keyword)cEEListEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cEEnumeratorEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cEEnumeratorEEnumeratorKeyword_14_0 = (Keyword)cEEnumeratorEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cEFeatureMapEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cEFeatureMapEFeatureMapKeyword_15_0 = (Keyword)cEFeatureMapEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cEFeatureMapEntryEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cEFeatureMapEntryEFeatureMapEntryKeyword_16_0 = (Keyword)cEFeatureMapEntryEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cEFloatEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cEFloatEFloatKeyword_17_0 = (Keyword)cEFloatEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cEFloatObjectEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cEFloatObjectEFloatObjectKeyword_18_0 = (Keyword)cEFloatObjectEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cEIntEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cEIntEIntKeyword_19_0 = (Keyword)cEIntEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cEIntegerObjectEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cEIntegerObjectEIntegerObjectKeyword_20_0 = (Keyword)cEIntegerObjectEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cETreeIteratorEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cETreeIteratorETreeIteratorKeyword_21_0 = (Keyword)cETreeIteratorEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cEInvocationTargetExceptionEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cEInvocationTargetExceptionEInvocationTargetExceptionKeyword_22_0 = (Keyword)cEInvocationTargetExceptionEnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cEJavaClassEnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cEJavaClassEJavaClassKeyword_23_0 = (Keyword)cEJavaClassEnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cEJavaObjectEnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cEJavaObjectEJavaObjectKeyword_24_0 = (Keyword)cEJavaObjectEnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cELongEnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cELongELongKeyword_25_0 = (Keyword)cELongEnumLiteralDeclaration_25.eContents().get(0);
		private final EnumLiteralDeclaration cELongObjectEnumLiteralDeclaration_26 = (EnumLiteralDeclaration)cAlternatives.eContents().get(26);
		private final Keyword cELongObjectELongObjectKeyword_26_0 = (Keyword)cELongObjectEnumLiteralDeclaration_26.eContents().get(0);
		private final EnumLiteralDeclaration cEMapEnumLiteralDeclaration_27 = (EnumLiteralDeclaration)cAlternatives.eContents().get(27);
		private final Keyword cEMapEMapKeyword_27_0 = (Keyword)cEMapEnumLiteralDeclaration_27.eContents().get(0);
		private final EnumLiteralDeclaration cEResourceEnumLiteralDeclaration_28 = (EnumLiteralDeclaration)cAlternatives.eContents().get(28);
		private final Keyword cEResourceEResourceKeyword_28_0 = (Keyword)cEResourceEnumLiteralDeclaration_28.eContents().get(0);
		private final EnumLiteralDeclaration cEResourceSetEnumLiteralDeclaration_29 = (EnumLiteralDeclaration)cAlternatives.eContents().get(29);
		private final Keyword cEResourceSetEResourceSetKeyword_29_0 = (Keyword)cEResourceSetEnumLiteralDeclaration_29.eContents().get(0);
		private final EnumLiteralDeclaration cEShortEnumLiteralDeclaration_30 = (EnumLiteralDeclaration)cAlternatives.eContents().get(30);
		private final Keyword cEShortEShortKeyword_30_0 = (Keyword)cEShortEnumLiteralDeclaration_30.eContents().get(0);
		private final EnumLiteralDeclaration cEShortObjectEnumLiteralDeclaration_31 = (EnumLiteralDeclaration)cAlternatives.eContents().get(31);
		private final Keyword cEShortObjectEShortObjectKeyword_31_0 = (Keyword)cEShortObjectEnumLiteralDeclaration_31.eContents().get(0);
		private final EnumLiteralDeclaration cEStringEnumLiteralDeclaration_32 = (EnumLiteralDeclaration)cAlternatives.eContents().get(32);
		private final Keyword cEStringEStringKeyword_32_0 = (Keyword)cEStringEnumLiteralDeclaration_32.eContents().get(0);
		
		//enum Type:
		//	eBigDecimal='EBigDecimal' | eBigInteger='EBigInteger' | eBoolean='EBoolean' | eBooleanObject='EBooleanObject' |
		//	eByte='EByte' | eByteArray='EByteArray' | eByteObject='EByteObject' | eChar='EChar' |
		//	eCharacterObject='ECharacterObject' | eDate='EDate' | eDiagnosticChain='EDiagnosticChain' | eDouble='EDouble' |
		//	eDoubleObject='EDoubleObject' | eEList='EEList' | eEnumerator='EEnumerator' | eFeatureMap='EFeatureMap' |
		//	eFeatureMapEntry='EFeatureMapEntry' | eFloat='EFloat' | eFloatObject='EFloatObject' | eInt='EInt' |
		//	eIntegerObject='EIntegerObject' | eTreeIterator='ETreeIterator' |
		//	eInvocationTargetException='EInvocationTargetException' | eJavaClass='EJavaClass' | eJavaObject='EJavaObject' |
		//	eLong='ELong' | eLongObject='ELongObject' | eMap='EMap' | eResource='EResource' | eResourceSet='EResourceSet' |
		//	eShort='EShort' | eShortObject='EShortObject' | eString='EString';
		public EnumRule getRule() { return rule; }
		
		//eBigDecimal='EBigDecimal' | eBigInteger='EBigInteger' | eBoolean='EBoolean' | eBooleanObject='EBooleanObject' |
		//eByte='EByte' | eByteArray='EByteArray' | eByteObject='EByteObject' | eChar='EChar' |
		//eCharacterObject='ECharacterObject' | eDate='EDate' | eDiagnosticChain='EDiagnosticChain' | eDouble='EDouble' |
		//eDoubleObject='EDoubleObject' | eEList='EEList' | eEnumerator='EEnumerator' | eFeatureMap='EFeatureMap' |
		//eFeatureMapEntry='EFeatureMapEntry' | eFloat='EFloat' | eFloatObject='EFloatObject' | eInt='EInt' |
		//eIntegerObject='EIntegerObject' | eTreeIterator='ETreeIterator' |
		//eInvocationTargetException='EInvocationTargetException' | eJavaClass='EJavaClass' | eJavaObject='EJavaObject' |
		//eLong='ELong' | eLongObject='ELongObject' | eMap='EMap' | eResource='EResource' | eResourceSet='EResourceSet' |
		//eShort='EShort' | eShortObject='EShortObject' | eString='EString'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//eBigDecimal='EBigDecimal'
		public EnumLiteralDeclaration getEBigDecimalEnumLiteralDeclaration_0() { return cEBigDecimalEnumLiteralDeclaration_0; }
		
		//'EBigDecimal'
		public Keyword getEBigDecimalEBigDecimalKeyword_0_0() { return cEBigDecimalEBigDecimalKeyword_0_0; }
		
		//eBigInteger='EBigInteger'
		public EnumLiteralDeclaration getEBigIntegerEnumLiteralDeclaration_1() { return cEBigIntegerEnumLiteralDeclaration_1; }
		
		//'EBigInteger'
		public Keyword getEBigIntegerEBigIntegerKeyword_1_0() { return cEBigIntegerEBigIntegerKeyword_1_0; }
		
		//eBoolean='EBoolean'
		public EnumLiteralDeclaration getEBooleanEnumLiteralDeclaration_2() { return cEBooleanEnumLiteralDeclaration_2; }
		
		//'EBoolean'
		public Keyword getEBooleanEBooleanKeyword_2_0() { return cEBooleanEBooleanKeyword_2_0; }
		
		//eBooleanObject='EBooleanObject'
		public EnumLiteralDeclaration getEBooleanObjectEnumLiteralDeclaration_3() { return cEBooleanObjectEnumLiteralDeclaration_3; }
		
		//'EBooleanObject'
		public Keyword getEBooleanObjectEBooleanObjectKeyword_3_0() { return cEBooleanObjectEBooleanObjectKeyword_3_0; }
		
		//eByte='EByte'
		public EnumLiteralDeclaration getEByteEnumLiteralDeclaration_4() { return cEByteEnumLiteralDeclaration_4; }
		
		//'EByte'
		public Keyword getEByteEByteKeyword_4_0() { return cEByteEByteKeyword_4_0; }
		
		//eByteArray='EByteArray'
		public EnumLiteralDeclaration getEByteArrayEnumLiteralDeclaration_5() { return cEByteArrayEnumLiteralDeclaration_5; }
		
		//'EByteArray'
		public Keyword getEByteArrayEByteArrayKeyword_5_0() { return cEByteArrayEByteArrayKeyword_5_0; }
		
		//eByteObject='EByteObject'
		public EnumLiteralDeclaration getEByteObjectEnumLiteralDeclaration_6() { return cEByteObjectEnumLiteralDeclaration_6; }
		
		//'EByteObject'
		public Keyword getEByteObjectEByteObjectKeyword_6_0() { return cEByteObjectEByteObjectKeyword_6_0; }
		
		//eChar='EChar'
		public EnumLiteralDeclaration getECharEnumLiteralDeclaration_7() { return cECharEnumLiteralDeclaration_7; }
		
		//'EChar'
		public Keyword getECharECharKeyword_7_0() { return cECharECharKeyword_7_0; }
		
		//eCharacterObject='ECharacterObject'
		public EnumLiteralDeclaration getECharacterObjectEnumLiteralDeclaration_8() { return cECharacterObjectEnumLiteralDeclaration_8; }
		
		//'ECharacterObject'
		public Keyword getECharacterObjectECharacterObjectKeyword_8_0() { return cECharacterObjectECharacterObjectKeyword_8_0; }
		
		//eDate='EDate'
		public EnumLiteralDeclaration getEDateEnumLiteralDeclaration_9() { return cEDateEnumLiteralDeclaration_9; }
		
		//'EDate'
		public Keyword getEDateEDateKeyword_9_0() { return cEDateEDateKeyword_9_0; }
		
		//eDiagnosticChain='EDiagnosticChain'
		public EnumLiteralDeclaration getEDiagnosticChainEnumLiteralDeclaration_10() { return cEDiagnosticChainEnumLiteralDeclaration_10; }
		
		//'EDiagnosticChain'
		public Keyword getEDiagnosticChainEDiagnosticChainKeyword_10_0() { return cEDiagnosticChainEDiagnosticChainKeyword_10_0; }
		
		//eDouble='EDouble'
		public EnumLiteralDeclaration getEDoubleEnumLiteralDeclaration_11() { return cEDoubleEnumLiteralDeclaration_11; }
		
		//'EDouble'
		public Keyword getEDoubleEDoubleKeyword_11_0() { return cEDoubleEDoubleKeyword_11_0; }
		
		//eDoubleObject='EDoubleObject'
		public EnumLiteralDeclaration getEDoubleObjectEnumLiteralDeclaration_12() { return cEDoubleObjectEnumLiteralDeclaration_12; }
		
		//'EDoubleObject'
		public Keyword getEDoubleObjectEDoubleObjectKeyword_12_0() { return cEDoubleObjectEDoubleObjectKeyword_12_0; }
		
		//eEList='EEList'
		public EnumLiteralDeclaration getEEListEnumLiteralDeclaration_13() { return cEEListEnumLiteralDeclaration_13; }
		
		//'EEList'
		public Keyword getEEListEEListKeyword_13_0() { return cEEListEEListKeyword_13_0; }
		
		//eEnumerator='EEnumerator'
		public EnumLiteralDeclaration getEEnumeratorEnumLiteralDeclaration_14() { return cEEnumeratorEnumLiteralDeclaration_14; }
		
		//'EEnumerator'
		public Keyword getEEnumeratorEEnumeratorKeyword_14_0() { return cEEnumeratorEEnumeratorKeyword_14_0; }
		
		//eFeatureMap='EFeatureMap'
		public EnumLiteralDeclaration getEFeatureMapEnumLiteralDeclaration_15() { return cEFeatureMapEnumLiteralDeclaration_15; }
		
		//'EFeatureMap'
		public Keyword getEFeatureMapEFeatureMapKeyword_15_0() { return cEFeatureMapEFeatureMapKeyword_15_0; }
		
		//eFeatureMapEntry='EFeatureMapEntry'
		public EnumLiteralDeclaration getEFeatureMapEntryEnumLiteralDeclaration_16() { return cEFeatureMapEntryEnumLiteralDeclaration_16; }
		
		//'EFeatureMapEntry'
		public Keyword getEFeatureMapEntryEFeatureMapEntryKeyword_16_0() { return cEFeatureMapEntryEFeatureMapEntryKeyword_16_0; }
		
		//eFloat='EFloat'
		public EnumLiteralDeclaration getEFloatEnumLiteralDeclaration_17() { return cEFloatEnumLiteralDeclaration_17; }
		
		//'EFloat'
		public Keyword getEFloatEFloatKeyword_17_0() { return cEFloatEFloatKeyword_17_0; }
		
		//eFloatObject='EFloatObject'
		public EnumLiteralDeclaration getEFloatObjectEnumLiteralDeclaration_18() { return cEFloatObjectEnumLiteralDeclaration_18; }
		
		//'EFloatObject'
		public Keyword getEFloatObjectEFloatObjectKeyword_18_0() { return cEFloatObjectEFloatObjectKeyword_18_0; }
		
		//eInt='EInt'
		public EnumLiteralDeclaration getEIntEnumLiteralDeclaration_19() { return cEIntEnumLiteralDeclaration_19; }
		
		//'EInt'
		public Keyword getEIntEIntKeyword_19_0() { return cEIntEIntKeyword_19_0; }
		
		//eIntegerObject='EIntegerObject'
		public EnumLiteralDeclaration getEIntegerObjectEnumLiteralDeclaration_20() { return cEIntegerObjectEnumLiteralDeclaration_20; }
		
		//'EIntegerObject'
		public Keyword getEIntegerObjectEIntegerObjectKeyword_20_0() { return cEIntegerObjectEIntegerObjectKeyword_20_0; }
		
		//eTreeIterator='ETreeIterator'
		public EnumLiteralDeclaration getETreeIteratorEnumLiteralDeclaration_21() { return cETreeIteratorEnumLiteralDeclaration_21; }
		
		//'ETreeIterator'
		public Keyword getETreeIteratorETreeIteratorKeyword_21_0() { return cETreeIteratorETreeIteratorKeyword_21_0; }
		
		//eInvocationTargetException='EInvocationTargetException'
		public EnumLiteralDeclaration getEInvocationTargetExceptionEnumLiteralDeclaration_22() { return cEInvocationTargetExceptionEnumLiteralDeclaration_22; }
		
		//'EInvocationTargetException'
		public Keyword getEInvocationTargetExceptionEInvocationTargetExceptionKeyword_22_0() { return cEInvocationTargetExceptionEInvocationTargetExceptionKeyword_22_0; }
		
		//eJavaClass='EJavaClass'
		public EnumLiteralDeclaration getEJavaClassEnumLiteralDeclaration_23() { return cEJavaClassEnumLiteralDeclaration_23; }
		
		//'EJavaClass'
		public Keyword getEJavaClassEJavaClassKeyword_23_0() { return cEJavaClassEJavaClassKeyword_23_0; }
		
		//eJavaObject='EJavaObject'
		public EnumLiteralDeclaration getEJavaObjectEnumLiteralDeclaration_24() { return cEJavaObjectEnumLiteralDeclaration_24; }
		
		//'EJavaObject'
		public Keyword getEJavaObjectEJavaObjectKeyword_24_0() { return cEJavaObjectEJavaObjectKeyword_24_0; }
		
		//eLong='ELong'
		public EnumLiteralDeclaration getELongEnumLiteralDeclaration_25() { return cELongEnumLiteralDeclaration_25; }
		
		//'ELong'
		public Keyword getELongELongKeyword_25_0() { return cELongELongKeyword_25_0; }
		
		//eLongObject='ELongObject'
		public EnumLiteralDeclaration getELongObjectEnumLiteralDeclaration_26() { return cELongObjectEnumLiteralDeclaration_26; }
		
		//'ELongObject'
		public Keyword getELongObjectELongObjectKeyword_26_0() { return cELongObjectELongObjectKeyword_26_0; }
		
		//eMap='EMap'
		public EnumLiteralDeclaration getEMapEnumLiteralDeclaration_27() { return cEMapEnumLiteralDeclaration_27; }
		
		//'EMap'
		public Keyword getEMapEMapKeyword_27_0() { return cEMapEMapKeyword_27_0; }
		
		//eResource='EResource'
		public EnumLiteralDeclaration getEResourceEnumLiteralDeclaration_28() { return cEResourceEnumLiteralDeclaration_28; }
		
		//'EResource'
		public Keyword getEResourceEResourceKeyword_28_0() { return cEResourceEResourceKeyword_28_0; }
		
		//eResourceSet='EResourceSet'
		public EnumLiteralDeclaration getEResourceSetEnumLiteralDeclaration_29() { return cEResourceSetEnumLiteralDeclaration_29; }
		
		//'EResourceSet'
		public Keyword getEResourceSetEResourceSetKeyword_29_0() { return cEResourceSetEResourceSetKeyword_29_0; }
		
		//eShort='EShort'
		public EnumLiteralDeclaration getEShortEnumLiteralDeclaration_30() { return cEShortEnumLiteralDeclaration_30; }
		
		//'EShort'
		public Keyword getEShortEShortKeyword_30_0() { return cEShortEShortKeyword_30_0; }
		
		//eShortObject='EShortObject'
		public EnumLiteralDeclaration getEShortObjectEnumLiteralDeclaration_31() { return cEShortObjectEnumLiteralDeclaration_31; }
		
		//'EShortObject'
		public Keyword getEShortObjectEShortObjectKeyword_31_0() { return cEShortObjectEShortObjectKeyword_31_0; }
		
		//eString='EString'
		public EnumLiteralDeclaration getEStringEnumLiteralDeclaration_32() { return cEStringEnumLiteralDeclaration_32; }
		
		//'EString'
		public Keyword getEStringEStringKeyword_32_0() { return cEStringEStringKeyword_32_0; }
	}
	
	private final ModelElements pModel;
	private final EPackageImportElements pEPackageImport;
	private final EStringElements pEString;
	private final ModelElementElements pModelElement;
	private final RuleElementElements pRuleElement;
	private final JavaImportElements pJavaImport;
	private final CheckDanglingElements pCheckDangling;
	private final InjectiveMatchingElements pInjectiveMatching;
	private final ConditionsElements pConditions;
	private final GraphElements pGraph;
	private final ActionTypeElements pActionType;
	private final GraphElementsElements pGraphElements;
	private final EdgesElements pEdges;
	private final EdgeElements pEdge;
	private final RuleNodeTypesElements pRuleNodeTypes;
	private final NodeElements pNode;
	private final MultiRuleReuseNodeElements pMultiRuleReuseNode;
	private final AttributeElements pAttribute;
	private final MultiRuleElements pMultiRule;
	private final FormulaElements pFormula;
	private final LogicElements pLogic;
	private final ORorXORElements pORorXOR;
	private final ANDElements pAND;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final ConditionGraphElements pConditionGraph;
	private final ConditionGraphElementsElements pConditionGraphElements;
	private final ConditionEdgesElements pConditionEdges;
	private final ConditionEdgeElements pConditionEdge;
	private final ConditionNodeTypesElements pConditionNodeTypes;
	private final ConditionNodeElements pConditionNode;
	private final ConditionReuseNodeElements pConditionReuseNode;
	private final MatchElements pMatch;
	private final UnitElementElements pUnitElement;
	private final SequentialPropertiesElements pSequentialProperties;
	private final StrictElements pStrict;
	private final RollbackElements pRollback;
	private final ListElements pList;
	private final IndependentUnitElements pIndependentUnit;
	private final ConditionalUnitElements pConditionalUnit;
	private final PriorityUnitElements pPriorityUnit;
	private final IteratedUnitElements pIteratedUnit;
	private final LoopUnitElements pLoopUnit;
	private final ParameterElements pParameter;
	private final ParameterKindElements eParameterKind;
	private final ParameterKindRuleElements eParameterKindRule;
	private final ParameterTypeElements pParameterType;
	private final TypeElements eType;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tNEGATIVE;
	private final EBooleanElements pEBoolean;
	private final ExpressionElements pExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final PlusOrMinusExpressionElements pPlusOrMinusExpression;
	private final MulOrDivExpressionElements pMulOrDivExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final AtomicExpressionElements pAtomicExpression;
	private final JavaAttributeElements pJavaAttribute;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Henshin_textGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEPackageImport = new EPackageImportElements();
		this.pEString = new EStringElements();
		this.pModelElement = new ModelElementElements();
		this.pRuleElement = new RuleElementElements();
		this.pJavaImport = new JavaImportElements();
		this.pCheckDangling = new CheckDanglingElements();
		this.pInjectiveMatching = new InjectiveMatchingElements();
		this.pConditions = new ConditionsElements();
		this.pGraph = new GraphElements();
		this.pActionType = new ActionTypeElements();
		this.pGraphElements = new GraphElementsElements();
		this.pEdges = new EdgesElements();
		this.pEdge = new EdgeElements();
		this.pRuleNodeTypes = new RuleNodeTypesElements();
		this.pNode = new NodeElements();
		this.pMultiRuleReuseNode = new MultiRuleReuseNodeElements();
		this.pAttribute = new AttributeElements();
		this.pMultiRule = new MultiRuleElements();
		this.pFormula = new FormulaElements();
		this.pLogic = new LogicElements();
		this.pORorXOR = new ORorXORElements();
		this.pAND = new ANDElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pConditionGraph = new ConditionGraphElements();
		this.pConditionGraphElements = new ConditionGraphElementsElements();
		this.pConditionEdges = new ConditionEdgesElements();
		this.pConditionEdge = new ConditionEdgeElements();
		this.pConditionNodeTypes = new ConditionNodeTypesElements();
		this.pConditionNode = new ConditionNodeElements();
		this.pConditionReuseNode = new ConditionReuseNodeElements();
		this.pMatch = new MatchElements();
		this.pUnitElement = new UnitElementElements();
		this.pSequentialProperties = new SequentialPropertiesElements();
		this.pStrict = new StrictElements();
		this.pRollback = new RollbackElements();
		this.pList = new ListElements();
		this.pIndependentUnit = new IndependentUnitElements();
		this.pConditionalUnit = new ConditionalUnitElements();
		this.pPriorityUnit = new PriorityUnitElements();
		this.pIteratedUnit = new IteratedUnitElements();
		this.pLoopUnit = new LoopUnitElements();
		this.pParameter = new ParameterElements();
		this.eParameterKind = new ParameterKindElements();
		this.eParameterKindRule = new ParameterKindRuleElements();
		this.pParameterType = new ParameterTypeElements();
		this.eType = new TypeElements();
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.DECIMAL");
		this.tNEGATIVE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.henshin.text.Henshin_text.NEGATIVE");
		this.pEBoolean = new EBooleanElements();
		this.pExpression = new ExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pPlusOrMinusExpression = new PlusOrMinusExpressionElements();
		this.pMulOrDivExpression = new MulOrDivExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pJavaAttribute = new JavaAttributeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.emf.henshin.text.Henshin_text".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////main element
	// Model:
	//	ePackageimports+=EPackageImport+ transformationsystem+=ModelElement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////EPackage import
	// EPackageImport:
	//	'ePackageImport' ref=[ecore::EPackage|EString];
	public EPackageImportElements getEPackageImportAccess() {
		return pEPackageImport;
	}
	
	public ParserRule getEPackageImportRule() {
		return getEPackageImportAccess().getRule();
	}
	
	//EString:
	//	ID ('.' ID)*;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	////rule and unit definition
	// ModelElement:
	//	'rule' {Rule} name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' '{' ruleElements+=RuleElement+
	//	'}' | 'unit' {Unit} name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' '{'
	//	unitElements+=UnitElement+ '}';
	public ModelElementElements getModelElementAccess() {
		return pModelElement;
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}
	
	////rule elements
	// RuleElement:
	//	JavaImport | CheckDangling | InjectiveMatching | Conditions | Graph;
	public RuleElementElements getRuleElementAccess() {
		return pRuleElement;
	}
	
	public ParserRule getRuleElementRule() {
		return getRuleElementAccess().getRule();
	}
	
	////Java class import
	// JavaImport:
	//	'javaImport' packagename=EString;
	public JavaImportElements getJavaImportAccess() {
		return pJavaImport;
	}
	
	public ParserRule getJavaImportRule() {
		return getJavaImportAccess().getRule();
	}
	
	////option CheckDangling  
	// CheckDangling:
	//	'checkDangling' checkDangling=EBoolean;
	public CheckDanglingElements getCheckDanglingAccess() {
		return pCheckDangling;
	}
	
	public ParserRule getCheckDanglingRule() {
		return getCheckDanglingAccess().getRule();
	}
	
	////option InjectiveMatching
	// InjectiveMatching:
	//	'injectiveMatching' injectiveMatching=EBoolean;
	public InjectiveMatchingElements getInjectiveMatchingAccess() {
		return pInjectiveMatching;
	}
	
	public ParserRule getInjectiveMatchingRule() {
		return getInjectiveMatchingAccess().getRule();
	}
	
	////Conditions (henshin:attributeCondition) 
	// Conditions:
	//	'conditions' '[' attributeConditions+=Expression ("," attributeConditions+=Expression)* ']';
	public ConditionsElements getConditionsAccess() {
		return pConditions;
	}
	
	public ParserRule getConditionsRule() {
		return getConditionsAccess().getRule();
	}
	
	////transformation graph
	// Graph:
	//	{Graph} 'graph' '{' graphElements+=GraphElements* '}';
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}
	
	////marks for nodes and edges (default:preserve)
	// ActionType:
	//	'preserve' | 'create' | 'delete' | 'forbid' | 'require';
	public ActionTypeElements getActionTypeAccess() {
		return pActionType;
	}
	
	public ParserRule getActionTypeRule() {
		return getActionTypeAccess().getRule();
	}
	
	////transformation graph elements
	// GraphElements:
	//	Edges | Node | Formula | MultiRule | MultiRuleReuseNode;
	public GraphElementsElements getGraphElementsAccess() {
		return pGraphElements;
	}
	
	public ParserRule getGraphElementsRule() {
		return getGraphElementsAccess().getRule();
	}
	
	////list of transformation graph edges
	// Edges:
	//	'edges' '[' edges+=Edge (',' edges+=Edge)* ']';
	public EdgesElements getEdgesAccess() {
		return pEdges;
	}
	
	public ParserRule getEdgesRule() {
		return getEdgesAccess().getRule();
	}
	
	////transformation graph edge (default:preserve)
	// Edge:
	//	'(' actiontype=ActionType? source=[RuleNodeTypes] '->' target=[RuleNodeTypes] ':' type=[ecore::EReference|EString]
	//	')';
	public EdgeElements getEdgeAccess() {
		return pEdge;
	}
	
	public ParserRule getEdgeRule() {
		return getEdgeAccess().getRule();
	}
	
	////node types (Edge definition)
	// RuleNodeTypes:
	//	Node | MultiRuleReuseNode;
	public RuleNodeTypesElements getRuleNodeTypesAccess() {
		return pRuleNodeTypes;
	}
	
	public ParserRule getRuleNodeTypesRule() {
		return getRuleNodeTypesAccess().getRule();
	}
	
	////transformation graph node
	// Node:
	//	actiontype=ActionType? 'node' name=ID ':' nodetype=[ecore::EClass|EString] ('{' attribute+=Attribute* '}')?;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	////reused transformation graph node (see documentation:MultiRule)
	// MultiRuleReuseNode:
	//	'reuse' name=[Node] ('{' attribute+=Attribute* '}')?;
	public MultiRuleReuseNodeElements getMultiRuleReuseNodeAccess() {
		return pMultiRuleReuseNode;
	}
	
	public ParserRule getMultiRuleReuseNodeRule() {
		return getMultiRuleReuseNodeAccess().getRule();
	}
	
	////transformation graph node attribute
	// Attribute:
	//	actiontype=ActionType? name=[ecore::EAttribute|EString] '=' value=Expression | update='set'
	//	name=[ecore::EAttribute|EString] '=' value=Expression;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	////multi-rule (amalgamation)
	// MultiRule:
	//	'multiRule' name=ID '{' multiruleElements+=RuleElement+ '}';
	public MultiRuleElements getMultiRuleAccess() {
		return pMultiRule;
	}
	
	public ParserRule getMultiRuleRule() {
		return getMultiRuleAccess().getRule();
	}
	
	////formula
	// Formula:
	//	'matchingFormula' '{' 'formula' formula=Logic conditionGraphs+=ConditionGraph+ '}';
	public FormulaElements getFormulaAccess() {
		return pFormula;
	}
	
	public ParserRule getFormulaRule() {
		return getFormulaAccess().getRule();
	}
	
	////logical expressions
	// Logic:
	//	ORorXOR;
	public LogicElements getLogicAccess() {
		return pLogic;
	}
	
	public ParserRule getLogicRule() {
		return getLogicAccess().getRule();
	}
	
	////logical expressions: OR and XOR
	// ORorXOR Logic:
	//	AND ({ORorXOR.left=current} op=('OR' | 'XOR') right=AND)*
	public ORorXORElements getORorXORAccess() {
		return pORorXOR;
	}
	
	public ParserRule getORorXORRule() {
		return getORorXORAccess().getRule();
	}
	
	////logical expressions: AND
	// AND Logic:
	//	Primary ({AND.left=current} 'AND' right=Primary)*
	public ANDElements getANDAccess() {
		return pAND;
	}
	
	public ParserRule getANDRule() {
		return getANDAccess().getRule();
	}
	
	////logical expressions: brackets and NOT
	// Primary Logic:
	//	'(' Logic ')' | {Not} '!' negation=Primary | Atomic
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	////logical expressions: atomic value
	// Atomic Logic:
	//	{ConditionGraphRef} conditionGraphRef=[ConditionGraph]
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	////conditionGraph
	// ConditionGraph:
	//	'conditionGraph' name=ID '{' conditionGraphElements+=ConditionGraphElements* '}';
	public ConditionGraphElements getConditionGraphAccess() {
		return pConditionGraph;
	}
	
	public ParserRule getConditionGraphRule() {
		return getConditionGraphAccess().getRule();
	}
	
	////conditionGraph elements
	// ConditionGraphElements:
	//	ConditionEdges | ConditionNode | Formula | ConditionReuseNode;
	public ConditionGraphElementsElements getConditionGraphElementsAccess() {
		return pConditionGraphElements;
	}
	
	public ParserRule getConditionGraphElementsRule() {
		return getConditionGraphElementsAccess().getRule();
	}
	
	////list of conditionGraph edges
	// ConditionEdges:
	//	'edges' '[' edges+=ConditionEdge ("," edges+=ConditionEdge)* ']';
	public ConditionEdgesElements getConditionEdgesAccess() {
		return pConditionEdges;
	}
	
	public ParserRule getConditionEdgesRule() {
		return getConditionEdgesAccess().getRule();
	}
	
	////conditionGraph edge
	// ConditionEdge:
	//	'(' source=[ConditionNodeTypes] '->' target=[ConditionNodeTypes] ':' type=[ecore::EReference|EString] ')';
	public ConditionEdgeElements getConditionEdgeAccess() {
		return pConditionEdge;
	}
	
	public ParserRule getConditionEdgeRule() {
		return getConditionEdgeAccess().getRule();
	}
	
	////node types (ConditionEdge definition)
	// ConditionNodeTypes:
	//	ConditionNode | Node;
	public ConditionNodeTypesElements getConditionNodeTypesAccess() {
		return pConditionNodeTypes;
	}
	
	public ParserRule getConditionNodeTypesRule() {
		return getConditionNodeTypesAccess().getRule();
	}
	
	////conditionGraph node
	// ConditionNode:
	//	'node' name=ID ':' type=[ecore::EClass|EString] ('{' attribute+=Match* '}')?;
	public ConditionNodeElements getConditionNodeAccess() {
		return pConditionNode;
	}
	
	public ParserRule getConditionNodeRule() {
		return getConditionNodeAccess().getRule();
	}
	
	////reused conditionGraph node (see documentation:ConditionGraph)
	// ConditionReuseNode:
	//	'reuse' name=[ConditionNodeTypes] ('{' attribute+=Match* '}')?;
	public ConditionReuseNodeElements getConditionReuseNodeAccess() {
		return pConditionReuseNode;
	}
	
	public ParserRule getConditionReuseNodeRule() {
		return getConditionReuseNodeAccess().getRule();
	}
	
	////conditionGraph node attribute
	// Match:
	//	name=[ecore::EAttribute|EString] '=' value=Expression;
	public MatchElements getMatchAccess() {
		return pMatch;
	}
	
	public ParserRule getMatchRule() {
		return getMatchAccess().getRule();
	}
	
	////unit elements
	// UnitElement:
	//	{Call} elementCall=[ModelElement] '(' (parameters+=[Parameter] (',' parameters+=[Parameter])*)? ')' | '{'
	//	subSequence+=UnitElement+ '}' | SequentialProperties | IndependentUnit | ConditionalUnit | PriorityUnit |
	//	IteratedUnit | LoopUnit;
	public UnitElementElements getUnitElementAccess() {
		return pUnitElement;
	}
	
	public ParserRule getUnitElementRule() {
		return getUnitElementAccess().getRule();
	}
	
	////sequentialUnit properties
	// SequentialProperties:
	//	Strict | Rollback;
	public SequentialPropertiesElements getSequentialPropertiesAccess() {
		return pSequentialProperties;
	}
	
	public ParserRule getSequentialPropertiesRule() {
		return getSequentialPropertiesAccess().getRule();
	}
	
	////option Strict
	// Strict:
	//	'strict' strict=EBoolean;
	public StrictElements getStrictAccess() {
		return pStrict;
	}
	
	public ParserRule getStrictRule() {
		return getStrictAccess().getRule();
	}
	
	////option Rollback
	// Rollback:
	//	'rollback' rollback=EBoolean;
	public RollbackElements getRollbackAccess() {
		return pRollback;
	}
	
	public ParserRule getRollbackRule() {
		return getRollbackAccess().getRule();
	}
	
	////list of unit elements
	// List:
	//	subElements+=UnitElement+;
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	////independentUnit
	// IndependentUnit:
	//	'independent' '[' listOfLists+=List (',' listOfLists+=List)* ']';
	public IndependentUnitElements getIndependentUnitAccess() {
		return pIndependentUnit;
	}
	
	public ParserRule getIndependentUnitRule() {
		return getIndependentUnitAccess().getRule();
	}
	
	////conditionalUnit
	// ConditionalUnit:
	//	'if' '(' if+=UnitElement+ ')' 'then' '{' then+=UnitElement+ '}' ('else' '{' else+=UnitElement+ '}')?;
	public ConditionalUnitElements getConditionalUnitAccess() {
		return pConditionalUnit;
	}
	
	public ParserRule getConditionalUnitRule() {
		return getConditionalUnitAccess().getRule();
	}
	
	////priorityUnit
	// PriorityUnit:
	//	'priority' '[' listOfLists+=List (',' listOfLists+=List)* ']';
	public PriorityUnitElements getPriorityUnitAccess() {
		return pPriorityUnit;
	}
	
	public ParserRule getPriorityUnitRule() {
		return getPriorityUnitAccess().getRule();
	}
	
	////iteratedUnit
	// IteratedUnit:
	//	{IteratedUnit} 'for' '(' iterations=Expression ')' '{' subElement+=UnitElement+ '}';
	public IteratedUnitElements getIteratedUnitAccess() {
		return pIteratedUnit;
	}
	
	public ParserRule getIteratedUnitRule() {
		return getIteratedUnitAccess().getRule();
	}
	
	////loopUnit
	// LoopUnit:
	//	'while' '{' subElement+=UnitElement+ '}';
	public LoopUnitElements getLoopUnitAccess() {
		return pLoopUnit;
	}
	
	public ParserRule getLoopUnitRule() {
		return getLoopUnitAccess().getRule();
	}
	
	////parameter
	// Parameter:
	//	kind=ParameterKindRule? name=ID ':' type=ParameterType;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//enum ParameterKind:
	//	UNKNOWN | IN | OUT | INOUT | VAR;
	public ParameterKindElements getParameterKindAccess() {
		return eParameterKind;
	}
	
	public EnumRule getParameterKindRule() {
		return getParameterKindAccess().getRule();
	}
	
	//enum ParameterKindRule returns ParameterKind:
	//	IN | OUT | INOUT | VAR;
	public ParameterKindRuleElements getParameterKindRuleAccess() {
		return eParameterKindRule;
	}
	
	public EnumRule getParameterKindRuleRule() {
		return getParameterKindRuleAccess().getRule();
	}
	
	////parameter types
	// ParameterType:
	//	enumType=Type | type=[ecore::EClass|EString];
	public ParameterTypeElements getParameterTypeAccess() {
		return pParameterType;
	}
	
	public ParserRule getParameterTypeRule() {
		return getParameterTypeAccess().getRule();
	}
	
	//enum Type:
	//	eBigDecimal='EBigDecimal' | eBigInteger='EBigInteger' | eBoolean='EBoolean' | eBooleanObject='EBooleanObject' |
	//	eByte='EByte' | eByteArray='EByteArray' | eByteObject='EByteObject' | eChar='EChar' |
	//	eCharacterObject='ECharacterObject' | eDate='EDate' | eDiagnosticChain='EDiagnosticChain' | eDouble='EDouble' |
	//	eDoubleObject='EDoubleObject' | eEList='EEList' | eEnumerator='EEnumerator' | eFeatureMap='EFeatureMap' |
	//	eFeatureMapEntry='EFeatureMapEntry' | eFloat='EFloat' | eFloatObject='EFloatObject' | eInt='EInt' |
	//	eIntegerObject='EIntegerObject' | eTreeIterator='ETreeIterator' |
	//	eInvocationTargetException='EInvocationTargetException' | eJavaClass='EJavaClass' | eJavaObject='EJavaObject' |
	//	eLong='ELong' | eLongObject='ELongObject' | eMap='EMap' | eResource='EResource' | eResourceSet='EResourceSet' |
	//	eShort='EShort' | eShortObject='EShortObject' | eString='EString';
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal DECIMAL:
	//	'-'? '0'..'9'+ '.' '0'..'9'+;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//terminal NEGATIVE:
	//	'-' '0'..'9'+;
	public TerminalRule getNEGATIVERule() {
		return tNEGATIVE;
	}
	
	////boolean
	// EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	////expressions
	// Expression:
	//	OrExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	////expressions: OR
	// OrExpression Expression:
	//	AndExpression ({OrExpression.left=current} "OR" right=AndExpression)*
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	////expressions: AND
	// AndExpression Expression:
	//	EqualityExpression ({AndExpression.left=current} "AND" right=EqualityExpression)*
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	////expressions: equal and not equal  
	// EqualityExpression Expression:
	//	ComparisonExpression ({EqualityExpression.left=current} op=("==" | "!=") right=ComparisonExpression)*
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	////expressions: relational operators 
	// ComparisonExpression Expression:
	//	PlusOrMinusExpression ({ComparisonExpression.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinusExpression)*
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	////expressions: addition and subtraction 
	// PlusOrMinusExpression Expression:
	//	MulOrDivExpression (({PlusExpression.left=current} '+' | {MinusExpression.left=current} '-')
	//	right=MulOrDivExpression)*
	public PlusOrMinusExpressionElements getPlusOrMinusExpressionAccess() {
		return pPlusOrMinusExpression;
	}
	
	public ParserRule getPlusOrMinusExpressionRule() {
		return getPlusOrMinusExpressionAccess().getRule();
	}
	
	////expressions: multiplication and division
	// MulOrDivExpression Expression:
	//	PrimaryExpression ({MulOrDivExpression.left=current} op=('*' | '/') right=PrimaryExpression)*
	public MulOrDivExpressionElements getMulOrDivExpressionAccess() {
		return pMulOrDivExpression;
	}
	
	public ParserRule getMulOrDivExpressionRule() {
		return getMulOrDivExpressionAccess().getRule();
	}
	
	////expressions: brackets and NOT
	// PrimaryExpression Expression:
	//	{BracketExpression} '(' expression=Expression ')' | {NotExpression} "!" expression=PrimaryExpression |
	//	AtomicExpression
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	////expressions: atomic values
	// AtomicExpression Expression:
	//	{ParameterValue} value=[Parameter] | {JavaClassValue} value=EString '(' (javaParameter+=Expression (','
	//	javaParameter+=Expression)*)? ')' | {JavaAttributeValue} value=JavaAttribute | {StringValue} value=STRING |
	//	{NumberValue} value=DECIMAL | {IntegerValue} value=NEGATIVE | {NaturalValue} value=INT | {BoolValue} value=EBoolean
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//JavaAttribute:
	//	ID '.' ID;
	public JavaAttributeElements getJavaAttributeAccess() {
		return pJavaAttribute;
	}
	
	public ParserRule getJavaAttributeRule() {
		return getJavaAttributeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
